import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as p}from"./app-BzW9chhs.js";const t={},o=p(`<h1 id="前缀和、差分数组" tabindex="-1"><a class="header-anchor" href="#前缀和、差分数组"><span>前缀和、差分数组</span></a></h1><h2 id="前缀和数组" tabindex="-1"><a class="header-anchor" href="#前缀和数组"><span>前缀和数组</span></a></h2><p>前缀和数组主要用于快速、频繁地计算一个区间内的元素之和。</p><h3 id="一维数组的前缀和-303" tabindex="-1"><a class="header-anchor" href="#一维数组的前缀和-303"><span>一维数组的前缀和 ( 303 )</span></a></h3><p>给定数组 nums 和区间 [i, j]，求这个区间的元素之和。</p><p>通常的做法是遍历 nums，将区间内的元素相加，时间复杂度为 O(n)。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sumRange</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre></div><p>然而，当 sumRange 会被频繁调用时，O(n) 的复杂度就不满足了，我们需要 O(1) 的复杂度。</p><p>具体做法是用一个数组 preSum，preSum[i] 表示 nums 在 [0, i) 区间的累加和。具体代码如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">NumArray</span><span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// preSum[0] = 0，便于计算累加和</span>
    <span class="token keyword">const</span> preSum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      preSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> preSum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>preSum <span class="token operator">=</span> preSum
  <span class="token punctuation">}</span>

  <span class="token comment">// 返回 [left, right] 区间的累加和</span>
	<span class="token function">sumRange</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>preSum<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>preSum<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>举个例子，下图中 [1, 4] 的元素和等于 <code>preSum[5] - preSum[1]</code>。</p><p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/前缀和数组.svg" alt=""></p><h3 id="二维矩阵的前缀和-304" tabindex="-1"><a class="header-anchor" href="#二维矩阵的前缀和-304"><span>二维矩阵的前缀和 ( 304 )</span></a></h3><p>从一维拓展到二维，求二维矩阵中一块区域的元素之和也是使用前缀和数组。</p><img class="img-mid" src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/e6c9d24egy1h5i55xhxtzj20zk0k0gmg.jpg" style="zoom:45%;"><p>红色区域的元素之和，可以通过如图四块元素之和通过加减得到。最重要的是，这四块区域的左上角坐标都是 (0, 0)。</p><p>我们同样维护一个 preSum 数组，preSum[i][j] 表示 (0, 0) 和 (i, j) 围成的矩形区域中的元素之和。</p><p>代码如下，注意preSum 的元素下标。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">NumMatrix</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">matrix</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> m <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">,</span> n <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>

    <span class="token comment">// m + 1 行，n + 1 列</span>
    <span class="token keyword">const</span> preSum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    	<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    	<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    preSum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> preSum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> preSum<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        preSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> preSum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
          <span class="token operator">+</span> preSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
          <span class="token operator">+</span> matrix<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
          <span class="token operator">-</span> preSum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>preSum <span class="token operator">=</span> preSum
  <span class="token punctuation">}</span>

  <span class="token function">sumRegion</span><span class="token punctuation">(</span><span class="token parameter">x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> preSum <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>preSum
    <span class="token keyword">return</span> preSum<span class="token punctuation">[</span>x2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
      <span class="token operator">-</span> preSum<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
      <span class="token operator">-</span> preSum<span class="token punctuation">[</span>x2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span>
      <span class="token operator">+</span> preSum<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="差分数组" tabindex="-1"><a class="header-anchor" href="#差分数组"><span>差分数组</span></a></h2><p>差分数组主要用于频繁对数组的某个区间的元素进行增减。</p><p>比如对数组 <code>nums</code>，先对区间 [2, 6] 的元素全部加 1，再对区间 [3, 9] 的所有元素减 3，再对 [2,6] 的元素全部加 2，求最终数组的值。</p><p>针对类似的区间元素加减的操作，如果每次都循环一遍，效率会比较低下，为此，需要使用差分数组。</p><p>diff 差分数组：<code>diff[i] = nums[i] - nums[i - 1]</code></p><p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/差分数组.svg" alt=""></p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> diff <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>根据 diff 数组推出原始数组：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span>diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment">// nums 和 diff 的第一个元素是一样的</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> diff<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果需要对 <code>[i,j]</code> 内的元素都加上 3，<code>diff[i+1] ~ diff[j]</code> 的元素是不需要变的，只需要 <code>diff[i] += 3, diff[j+1] -=3</code> 即可。</p><p>每次对区间 <code>[i,j]</code> 的操作，只需要对 <code>diff[i]</code> 和 <code>diff[j+1]</code> 两个位置操作即可，多次区间操作后，再遍历一次 diff 数组即可反推回数组。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Difference</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 构造 diff 数组</span>
    <span class="token keyword">const</span> diff <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>diff <span class="token operator">=</span> diff
  <span class="token punctuation">}</span>
  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 区间操作</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> val
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> diff<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token keyword">this</span><span class="token punctuation">.</span>diff<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span>val
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 根据 diff 数组推出原始数组</span>
    <span class="token keyword">const</span> diff <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>diff
    <span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span>diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> diff<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
      nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">return</span> nums
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="航班预计统计-1109" tabindex="-1"><a class="header-anchor" href="#航班预计统计-1109"><span>航班预计统计 ( 1109 )</span></a></h3><h3 id="拼车-1094" tabindex="-1"><a class="header-anchor" href="#拼车-1094"><span>拼车 ( 1094 )</span></a></h3>`,33),e=[o];function c(u,l){return s(),a("div",null,e)}const i=n(t,[["render",c],["__file","1.4.前缀和、差分数组.html.vue"]]),m=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/leetcode/1.4.%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%81%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84.html","title":"前缀和、差分数组","lang":"zh-CN","frontmatter":{"description":"前缀和、差分数组 前缀和数组 前缀和数组主要用于快速、频繁地计算一个区间内的元素之和。 一维数组的前缀和 ( 303 ) 给定数组 nums 和区间 [i, j]，求这个区间的元素之和。 通常的做法是遍历 nums，将区间内的元素相加，时间复杂度为 O(n)。 然而，当 sumRange 会被频繁调用时，O(n) 的复杂度就不满足了，我们需要 O(1)...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E7%BC%96%E7%A8%8B/leetcode/1.4.%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%81%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"前缀和、差分数组"}],["meta",{"property":"og:description","content":"前缀和、差分数组 前缀和数组 前缀和数组主要用于快速、频繁地计算一个区间内的元素之和。 一维数组的前缀和 ( 303 ) 给定数组 nums 和区间 [i, j]，求这个区间的元素之和。 通常的做法是遍历 nums，将区间内的元素相加，时间复杂度为 O(n)。 然而，当 sumRange 会被频繁调用时，O(n) 的复杂度就不满足了，我们需要 O(1)..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/%E5%89%8D%E7%BC%80%E5%92%8C%E6%95%B0%E7%BB%84.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前缀和、差分数组\\",\\"image\\":[\\"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/%E5%89%8D%E7%BC%80%E5%92%8C%E6%95%B0%E7%BB%84.svg\\",\\"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84.svg\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"前缀和数组","slug":"前缀和数组","link":"#前缀和数组","children":[{"level":3,"title":"一维数组的前缀和 ( 303 )","slug":"一维数组的前缀和-303","link":"#一维数组的前缀和-303","children":[]},{"level":3,"title":"二维矩阵的前缀和 ( 304 )","slug":"二维矩阵的前缀和-304","link":"#二维矩阵的前缀和-304","children":[]}]},{"level":2,"title":"差分数组","slug":"差分数组","link":"#差分数组","children":[{"level":3,"title":"航班预计统计 ( 1109 )","slug":"航班预计统计-1109","link":"#航班预计统计-1109","children":[]},{"level":3,"title":"拼车 ( 1094 )","slug":"拼车-1094","link":"#拼车-1094","children":[]}]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":3.09,"words":927},"filePathRelative":"编程/leetcode/1.4.前缀和、差分数组.md","localizedDate":"2024年4月12日","autoDesc":true}');export{i as comp,m as data};
