import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,b as t}from"./app-BzW9chhs.js";const p={},o=t(`<h1 id="快速排序与前序遍历" tabindex="-1"><a class="header-anchor" href="#快速排序与前序遍历"><span>快速排序与前序遍历</span></a></h1><p>快速排序的过程是一个构造二叉搜索树的过程。</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_jpg/gibkIz0MVqdGZy8ttAE2M0GxYNH54ibyAfce9pETnTkYCCtVibHibn11pA561CSfSERaN933CWCEjDEwCpeHL0DicsQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="Image"></p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 单个元素有序</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
  <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 暂时用第一个元素作为分割点，为防止退化成链表，可随机取 partition</span>
  <span class="token keyword">const</span> p <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span>

  <span class="token comment">// 定义 [l, i) &lt; partition，(j, r] &gt;= partition</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> r
  <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// i 指针往右，找到第一个大于 p 的值</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span> i<span class="token operator">++</span> <span class="token punctuation">}</span> <span class="token comment">// 循环结束时，nums[i] &gt;= p</span>
    <span class="token comment">// j 指针往左，找到第一个小于 p 的值</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&gt;</span> l <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span> j<span class="token operator">--</span> <span class="token punctuation">}</span> <span class="token comment">// 循环结束时，nums[j] &lt; p</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> j<span class="token punctuation">)</span> <span class="token keyword">break</span>

    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token comment">// 交换后，nums[i] &lt; p, nums[j] &gt;= p</span>
  <span class="token punctuation">}</span>

  <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token comment">// 由于 nums[j] &gt;= p，所以最后 p 和 j 交换</span>
  <span class="token keyword">return</span> j
<span class="token punctuation">}</span>
</code></pre></div><p>处理边界细节的一个技巧就是，你要明确每个变量的定义以及区间的开闭情况。</p><p><code>[lo, i) &lt;= pivot, (j, hi] &gt; pivot</code>，之后都要正确维护这个边界区间的定义。</p>`,7),e=[o];function c(i,l){return a(),s("div",null,e)}const k=n(p,[["render",c],["__file","4.2.快速排序与前序遍历.html.vue"]]),m=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/leetcode/4.2.%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86.html","title":"快速排序与前序遍历","lang":"zh-CN","frontmatter":{"description":"快速排序与前序遍历 快速排序的过程是一个构造二叉搜索树的过程。 Image 处理边界细节的一个技巧就是，你要明确每个变量的定义以及区间的开闭情况。 [lo, i) <= pivot, (j, hi] > pivot，之后都要正确维护这个边界区间的定义。","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E7%BC%96%E7%A8%8B/leetcode/4.2.%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"快速排序与前序遍历"}],["meta",{"property":"og:description","content":"快速排序与前序遍历 快速排序的过程是一个构造二叉搜索树的过程。 Image 处理边界细节的一个技巧就是，你要明确每个变量的定义以及区间的开闭情况。 [lo, i) <= pivot, (j, hi] > pivot，之后都要正确维护这个边界区间的定义。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mmbiz.qpic.cn/sz_mmbiz_jpg/gibkIz0MVqdGZy8ttAE2M0GxYNH54ibyAfce9pETnTkYCCtVibHibn11pA561CSfSERaN933CWCEjDEwCpeHL0DicsQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"快速排序与前序遍历\\",\\"image\\":[\\"https://mmbiz.qpic.cn/sz_mmbiz_jpg/gibkIz0MVqdGZy8ttAE2M0GxYNH54ibyAfce9pETnTkYCCtVibHibn11pA561CSfSERaN933CWCEjDEwCpeHL0DicsQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":0.96,"words":287},"filePathRelative":"编程/leetcode/4.2.快速排序与前序遍历.md","localizedDate":"2024年4月12日","autoDesc":true}');export{k as comp,m as data};
