import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as e,a as n,d as a,e as u,b as s}from"./app-BzW9chhs.js";const l={},r=s(`<h1 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h1><h2 id="柯里化-currying" tabindex="-1"><a class="header-anchor" href="#柯里化-currying"><span>柯里化 ( currying )</span></a></h2><p>柯里化 ( currying ) 是一种关于函数的高阶技术。</p><p>柯里化不会调用函数，它只是对函数进行转换。，它将一个函数从可调用的 <code>f(a, b, c)</code> 转换为可调用的 <code>f(a)(b)(c)</code>。</p><p>对于求和函数 <code>sum</code>，通常的使用方法是这样的：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre></div><p>通过 curry 函数柯里化后，使用起来是这样的：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre></div><p>已知函数参数的情况下，curry 函数可以这样实现：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b
<span class="token keyword">const</span> curriedSum <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>

<span class="token function">curriedSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>
</code></pre></div><p>但是如果 sum 的参数个数未知，我们则无法直到 curry 函数中要嵌套多少层，所以，我们可以利用 <code>function.length</code> 得到参数个数。</p><p>具体实现如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">curried</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// fn.length 表示函数的形参个数</span>
      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token comment">// 当实参数大于等于形参时，说明已传入所有参数</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>anotherArg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">curried</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>anotherArg<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这样一来，函数参数的传递就比较灵活了。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">join</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>c<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">const</span> curriedJoin <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>join<span class="token punctuation">)</span>

<span class="token function">curriedJoin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// &#39;1_2_3&#39;</span>
<span class="token function">curriedJoin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// &#39;1_2_3&#39;</span>
<span class="token function">curriedJoin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// &#39;1_2_3&#39;</span>
</code></pre></div><h3 id="支持-placeholder-的-curry" tabindex="-1"><a class="header-anchor" href="#支持-placeholder-的-curry"><span>支持 placeholder 的 curry()</span></a></h3><p>现在要求柯里化后的函数可以传入一个特定的占位符，使得参数传递更加灵活。</p><p>比如 <code>join</code> 函数需要三个参数 <code>1,2,3</code>，当只得到中间参数如 <code>2</code> 时，可以传入占位符。效果如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> curriedJoin <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>join<span class="token punctuation">)</span>
<span class="token keyword">const</span> _ <span class="token operator">=</span> curry<span class="token punctuation">.</span>placeholder

<span class="token function">curriedJoin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// &#39;1_2_3</span>
<span class="token function">curriedJoin</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// &#39;1_2_3&#39;</span>
<span class="token function">curriedJoin</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// &#39;1_2_3&#39;</span>
</code></pre></div><p>解决方法：</p><ol><li><p>当目前得到的参数已经超过 fn 的形参个数，并且其中没有占位符时，调用 fn 返回结果即可</p></li><li><p>如果已经传入一些参数，且其中含有占位符，此时又传入一批新参数，则用新参数直接按顺序替换掉旧参数</p></li><li><p>新参数中也有可能含有占位符，所以第一步中需要附加一个条件：不需要全部参数不含占位符，只需要前 <code>fn.length</code> 个不含占位符即可</p></li></ol><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">curried</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      args<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> fn<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token comment">// 条件 1</span>
      <span class="token operator">!</span>args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>curry<span class="token punctuation">.</span>placeholder<span class="token punctuation">)</span> <span class="token comment">// 条件 3</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>anotherArg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> replacedArgs <span class="token operator">=</span> <span class="token function">replace</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> anotherArg<span class="token punctuation">)</span> <span class="token comment">// 条件2</span>
      <span class="token keyword">return</span> <span class="token function">curried</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> replacedArgs<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>anotherArg<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 将新传入的参数替换掉已传入参数中的占位符</span>
<span class="token comment">// old:[_, 2]  new:[1, 3] =&gt; [1, 2]</span>
<span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token parameter">oldArgs<span class="token punctuation">,</span> newArgs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> oldArgs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">arg</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg <span class="token operator">===</span> curry<span class="token punctuation">.</span>placeholder <span class="token operator">&amp;&amp;</span> newArgs<span class="token punctuation">.</span>length
      <span class="token operator">?</span> newArgs<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> arg
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

curry<span class="token punctuation">.</span>placeholder <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>以 <code>curriedJoin(_, 2)(1, 3, _, 4)</code> 为例，整个替换过程如下：</p><ul><li>传入 <code>[_, 2]</code>，此时没有旧参数，直接 concat 成 <code>[_, 2]</code></li><li>传入 <code>[1, 3]</code>，<code>old:[_, 2] new:[1, 3] =&gt; [1, 2]</code>，concat 成 <code>[1, 2, 3, _, 4]</code></li><li>此时实参长度大于形参长度 3，且前 3 个参数不含占位符，传入 fn 返回结果</li></ul>`,24),i={href:"https://zh.javascript.info/currying-partials",target:"_blank",rel:"noopener noreferrer"},k=s(`<h2 id="shuffle-随机打乱数组" tabindex="-1"><a class="header-anchor" href="#shuffle-随机打乱数组"><span>shuffle 随机打乱数组</span></a></h2><p>传入一个数组，shuffle 函数随机更换元素的顺序，且每一种排列的生成概率相同。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> j <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 前 i 位置随机选个位置交换</span>
    <span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="memo" tabindex="-1"><a class="header-anchor" href="#memo"><span>memo</span></a></h2><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">memo</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token function-variable function">resolver</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cacheKey <span class="token operator">=</span> <span class="token function">resolver</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token keyword">return</span> value
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,5);function d(m,f){const t=o("ExternalLinkIcon");return c(),e("div",null,[r,n("p",null,[a("参考："),n("a",i,[a("柯里化（Currying）"),u(t)])]),k])}const h=p(l,[["render",d],["__file","函数.html.vue"]]),w=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81/%E5%87%BD%E6%95%B0.html","title":"函数","lang":"zh-CN","frontmatter":{"description":"函数 柯里化 ( currying ) 柯里化 ( currying ) 是一种关于函数的高阶技术。 柯里化不会调用函数，它只是对函数进行转换。，它将一个函数从可调用的 f(a, b, c) 转换为可调用的 f(a)(b)(c)。 对于求和函数 sum，通常的使用方法是这样的： 通过 curry 函数柯里化后，使用起来是这样的： 已知函数参数的情况下，...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E7%BC%96%E7%A8%8B/%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81/%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"函数"}],["meta",{"property":"og:description","content":"函数 柯里化 ( currying ) 柯里化 ( currying ) 是一种关于函数的高阶技术。 柯里化不会调用函数，它只是对函数进行转换。，它将一个函数从可调用的 f(a, b, c) 转换为可调用的 f(a)(b)(c)。 对于求和函数 sum，通常的使用方法是这样的： 通过 curry 函数柯里化后，使用起来是这样的： 已知函数参数的情况下，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"柯里化 ( currying )","slug":"柯里化-currying","link":"#柯里化-currying","children":[{"level":3,"title":"支持 placeholder 的 curry()","slug":"支持-placeholder-的-curry","link":"#支持-placeholder-的-curry","children":[]}]},{"level":2,"title":"shuffle 随机打乱数组","slug":"shuffle-随机打乱数组","link":"#shuffle-随机打乱数组","children":[]},{"level":2,"title":"memo","slug":"memo","link":"#memo","children":[]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":2.86,"words":859},"filePathRelative":"编程/手写代码/函数.md","localizedDate":"2024年4月12日","autoDesc":true}');export{h as comp,w as data};
