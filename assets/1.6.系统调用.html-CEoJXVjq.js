import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as a,b as r}from"./app-BzW9chhs.js";const i={},n=r(`<h1 id="系统调用" tabindex="-1"><a class="header-anchor" href="#系统调用"><span>系统调用</span></a></h1><p>系统调用其实就是操作系统提供的函数调用。</p><p>任务管理相关系统调用：</p><table><thead><tr><th>系统调用</th><th>描述</th></tr></thead><tbody><tr><td>fork</td><td>创建进程</td></tr><tr><td>execl</td><td>运行可执行程序</td></tr><tr><td>pthread_create</td><td>创建线程</td></tr></tbody></table><p>文件系统相关系统调用：</p><table><thead><tr><th>系统调用</th><th>描述</th></tr></thead><tbody><tr><td>open</td><td>打开文件</td></tr><tr><td>EACCES</td><td>返回值，表示没有权限</td></tr><tr><td>mode_t st_mode</td><td>文件头结构：文件属性</td></tr></tbody></table><p>POSIX：Portable Operating Symstem Interface of Unix，可移植操作系统接口，IEEE 制定的系统调用接口。</p><p>为什么：隔离内核程序和用户程序，保护内核</p><p>如何实现：CPU 硬件区分内核态和用户态</p><p>怎么办：通过中断进入内核</p><h2 id="内核态与用户态" tabindex="-1"><a class="header-anchor" href="#内核态与用户态"><span>内核态与用户态</span></a></h2><p>内核态和用户态是由硬件设计实现的。内核态可以访问任何数据，用户态不能访问内核数据，这是对操作系统的保护。</p><p>内核态和用户态是 CPU 的两种状态，分别表示执行内核代码和用户代码。在内存中也有类似概念，内存中同时保存着操作系统，应用程序的指令和数据，可以把它们称为用户空间和内核空间，或者用户内存段和内内存核段。</p><p>具体实现措施：用户段的指令不能跳转到内核段，具体来说，就是检查 CPL 和 DPL 的大小，0 表示内核态，3 表示用户态，这些值都保存在 GDT 表中，在初始化时已设置好。</p><p>如何实现内核态和用户态？</p><p>CPU 判断当前段 （CS） 的层级 CPL 与目标段 （DS）的层级 DPL 的大小，层级越小越重要，内核态为 0，os 服务为 1,2，用户态为 3</p><p>内核态可以访问任何数据，用户态不能访问内核数据。</p><p>os 内存中，各段的 level 都存放在 GDT 表中。</p><h2 id="中断进入内核" tabindex="-1"><a class="header-anchor" href="#中断进入内核"><span>中断进入内核</span></a></h2><p>中断指令 int ( interrupt )，int 指令将 CS 中的 CPL 改成 0，即改为内核态。</p><p>中断是用户程序调用内核的<strong>唯一方式</strong>。</p><p>因此，用户进行 printf 之类的系统调用时，必然会被编译成包含 int 指令的代码。</p><div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>用户调用 printf =&gt; C语言库函数 printf =&gt; C语言库函数 write =&gt; 系统调用 write
</code></pre></div><h3 id="int-0x80" tabindex="-1"><a class="header-anchor" href="#int-0x80"><span>int 0x80</span></a></h3><p>int 0x80 会通过查 IDT 表寻找需要跳转执行的指令，执行完后再跳回来。</p><ol><li>用户调用 printf</li><li>printf 转换成包含 int 0x80 的代码，设置 CPL = 0，DPL = 3，这样才能允许进入内核态</li><li>（以下是内核态）</li><li>中断处理 system_call</li><li>查表 sys_call_table</li><li><code>__NR_write = 4</code></li><li>调用 sys_write</li></ol>`,26),p=[n];function o(l,d){return e(),a("div",null,p)}const h=t(i,[["render",o],["__file","1.6.系统调用.html.vue"]]),m=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.6.%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8.html","title":"系统调用","lang":"zh-CN","frontmatter":{"description":"系统调用 系统调用其实就是操作系统提供的函数调用。 任务管理相关系统调用： 文件系统相关系统调用： POSIX：Portable Operating Symstem Interface of Unix，可移植操作系统接口，IEEE 制定的系统调用接口。 为什么：隔离内核程序和用户程序，保护内核 如何实现：CPU 硬件区分内核态和用户态 怎么办：通过中断...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.6.%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"系统调用"}],["meta",{"property":"og:description","content":"系统调用 系统调用其实就是操作系统提供的函数调用。 任务管理相关系统调用： 文件系统相关系统调用： POSIX：Portable Operating Symstem Interface of Unix，可移植操作系统接口，IEEE 制定的系统调用接口。 为什么：隔离内核程序和用户程序，保护内核 如何实现：CPU 硬件区分内核态和用户态 怎么办：通过中断..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"系统调用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"内核态与用户态","slug":"内核态与用户态","link":"#内核态与用户态","children":[]},{"level":2,"title":"中断进入内核","slug":"中断进入内核","link":"#中断进入内核","children":[{"level":3,"title":"int 0x80","slug":"int-0x80","link":"#int-0x80","children":[]}]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":2.2,"words":661},"filePathRelative":"计算机基础/操作系统/1.6.系统调用.md","localizedDate":"2024年4月12日","autoDesc":true}');export{h as comp,m as data};
