import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as d,c as o,a as t,d as n,e as a,b as i}from"./app-BzW9chhs.js";const c={},s=i(`<h1 id="bnf、abnf、ebnf" tabindex="-1"><a class="header-anchor" href="#bnf、abnf、ebnf"><span>BNF、ABNF、EBNF</span></a></h1><ul><li><p><code>BNF</code> 是最原始，最简单的方法，主要用于理论背景的学术论文中，以与人类进行交流。BNF 没有确切的规范。</p></li><li><p><code>EBNF</code> （<code>Extended BNF</code> 扩展BNF）没有一个标准的 EBNF，因为每个作者或程序都定义了自己的稍有不同的 EBNF 变体。</p></li><li><p><code>ABNF</code> （ <code>augmented BNF</code> 增强BNF）的语法与 BNF 完全不同，但是更加标准化，利于解析器的翻译，但不利于阅读。</p></li></ul><h2 id="bnf" tabindex="-1"><a class="header-anchor" href="#bnf"><span>BNF</span></a></h2><p>BNF(Backus-Naur Form) 范式，在 1960 年提出，用于描述 ALGOL60语言。</p><p>BNF包含三个符号：</p><ul><li><code>::=</code>，定义为</li><li><code>|</code>，或</li><li><code>&lt;&gt;</code>，非终结符使用尖括号</li></ul><p>一个 BNF 例子：</p><div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;十进制数&gt; ::= &lt;无符号整数&gt;
	| &lt;小数&gt;
	| &lt;无符号整数&gt;&lt;小数&gt;
&lt;无符号整数&gt; ::= &lt;数字&gt; | &lt;数字&gt;&lt;无符号整数&gt;
&lt;小数&gt; ::= .&lt;无符号整数&gt;
&lt;数字&gt; ::= 0|1|2|3|4|5|6|7|8|9
</code></pre></div><p>为了方便实用，BNF 后来增加了一些符号：</p><ul><li>可选项：用 <code>[]</code> 表示，比如 <code>if 表达式 then 语句 [else 语句] endif</code></li><li>重复项：用 <code>{}</code> 表示重复 0 次或多次</li><li>终结符加引号</li></ul><h2 id="abnf" tabindex="-1"><a class="header-anchor" href="#abnf"><span>ABNF</span></a></h2><p>ABNF 利于解析器的翻译，但不利于阅读。</p><table><thead><tr><th style="text-align:center;">规则</th><th style="text-align:center;">形式定义</th><th style="text-align:center;">意义</th></tr></thead><tbody><tr><td style="text-align:center;">ALPHA</td><td style="text-align:center;">%x41-5A / %x61-7A</td><td style="text-align:center;">大写和小写ASCII字母（A-Z, a-z）</td></tr><tr><td style="text-align:center;">DIGIT</td><td style="text-align:center;">%x30-39</td><td style="text-align:center;">数字（0-9）</td></tr><tr><td style="text-align:center;">HEXDIG</td><td style="text-align:center;">DIGIT / &quot;A&quot; / &quot;B&quot; / &quot;C&quot; / &quot;D&quot; / &quot;E&quot; / &quot;F&quot;</td><td style="text-align:center;">十六进制数字（0-9, A-F, a-f）</td></tr><tr><td style="text-align:center;">DQUOTE</td><td style="text-align:center;">%x22</td><td style="text-align:center;">双引号</td></tr><tr><td style="text-align:center;">SP</td><td style="text-align:center;">%x20</td><td style="text-align:center;">空格</td></tr><tr><td style="text-align:center;">HTAB</td><td style="text-align:center;">%x09</td><td style="text-align:center;">横向制表符</td></tr><tr><td style="text-align:center;">WSP</td><td style="text-align:center;">SP / HTAB</td><td style="text-align:center;">空格或横向制表符</td></tr><tr><td style="text-align:center;">LWSP</td><td style="text-align:center;">*(WSP / CRLF WSP)</td><td style="text-align:center;">直线空白（晚于换行）</td></tr><tr><td style="text-align:center;">VCHAR</td><td style="text-align:center;">%x21-7E</td><td style="text-align:center;">可见（打印）字符</td></tr><tr><td style="text-align:center;">CHAR</td><td style="text-align:center;">%x01-7F</td><td style="text-align:center;">任何7-位US-ASCII字符，不包括NUL（%x00）</td></tr><tr><td style="text-align:center;">OCTET</td><td style="text-align:center;">%x00-FF</td><td style="text-align:center;">8位数据</td></tr><tr><td style="text-align:center;">CTL</td><td style="text-align:center;">%x00-1F / %x7F</td><td style="text-align:center;">控制字符</td></tr><tr><td style="text-align:center;">CR</td><td style="text-align:center;">%x0D</td><td style="text-align:center;">回车</td></tr><tr><td style="text-align:center;">LF</td><td style="text-align:center;">%x0A</td><td style="text-align:center;">换行</td></tr><tr><td style="text-align:center;">CRLF</td><td style="text-align:center;">CR LF</td><td style="text-align:center;">互联网标准换行</td></tr><tr><td style="text-align:center;">BIT</td><td style="text-align:center;">&quot;0&quot; / &quot;1&quot;</td><td style="text-align:center;">二进制数字</td></tr></tbody></table><p>ABNF 例子：</p><div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>postal-address = name-part street zip-part

name-part = *(personal-part SP) last-name [SP suffix] CRLF
name-part = / personal-part CRLF

personal-part = first-name / (initial &quot;.&quot;)
first-name = *ALPHA
initial = ALPHA
last-name = *ALPHA
suffix = (&quot;Jr.&quot; / &quot;Sr.&quot; / 1*(&quot;I&quot; / &quot;V&quot; / &quot;X&quot;))

street = [apt SP] house-num SP street-name CRLF
apt = 1*4DIGIT
house-num = 1*8（DIGIT / ALPHA）
street-name = 1*VCHAR

zip-part = town-name &quot;,&quot; SP state 1*2SP zip-code CRLF
town-name = 1*(ALPHA / SP)
state = 2ALPHA
zip-code = 5DIGIT [&quot;-&quot; 4DIGIT]
</code></pre></div><h2 id="ebnf" tabindex="-1"><a class="header-anchor" href="#ebnf"><span>EBNF</span></a></h2><p>EBNF 的推荐标准是 ISO-14977。符号定义如下表：</p><table><thead><tr><th style="text-align:center;">用途</th><th style="text-align:center;">符号表示</th></tr></thead><tbody><tr><td style="text-align:center;">定义</td><td style="text-align:center;">=</td></tr><tr><td style="text-align:center;">串接</td><td style="text-align:center;">,</td></tr><tr><td style="text-align:center;">终止</td><td style="text-align:center;">;</td></tr><tr><td style="text-align:center;">分隔</td><td style="text-align:center;">|</td></tr><tr><td style="text-align:center;">可选</td><td style="text-align:center;">[ ... ]</td></tr><tr><td style="text-align:center;">重复</td><td style="text-align:center;">{ ... }</td></tr><tr><td style="text-align:center;">分组</td><td style="text-align:center;">( ... )</td></tr><tr><td style="text-align:center;">双引号</td><td style="text-align:center;">&quot; ... &quot;</td></tr><tr><td style="text-align:center;">单引号</td><td style="text-align:center;">&#39; ... &#39;</td></tr><tr><td style="text-align:center;">注释</td><td style="text-align:center;">(* ... *)</td></tr><tr><td style="text-align:center;">特殊序列</td><td style="text-align:center;">? ... ?</td></tr><tr><td style="text-align:center;">除外</td><td style="text-align:center;">-</td></tr></tbody></table><p>一个 EBNF 例子：</p><div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>(* a simple program in EBNF − Wikipedia *)
 program = &#39;PROGRAM&#39; , white space , identifier , white space ,
            &#39;BEGIN&#39; , white space ,
            { assignment , &quot;;&quot; , white space } ,
            &#39;END.&#39; ;
 identifier = alphabetic character , [ { alphabetic character | digit } ] ;
 number = [ &quot;-&quot; ] , digit , [ { digit } ] ;
 string = &#39;&quot;&#39; , { all characters − &#39;&quot;&#39; } , &#39;&quot;&#39; ;
 assignment = identifier , &quot;:=&quot; , ( number | identifier | string ) ;
 alphabetic character = &quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot;
                      | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot;
                      | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot;
                      | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot; | &quot;Z&quot; ;
 digit = &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot; | &quot;9&quot; ;
 white space = ? white space characters ? ;
 all characters = ? all visible characters ? ;
</code></pre></div><h2 id="三者的不同" tabindex="-1"><a class="header-anchor" href="#三者的不同"><span>三者的不同</span></a></h2><p><code>BNF</code>、<code>EBNF</code>、<code>ABNF</code> 三者的表达能力是等效的；只是语法上有差异。</p><ul><li><p>BNF 中，左式 和 右式 的分隔符通常是<code>::=</code>，在 EBNF 和 ABNF 中是 <code>=</code>；</p></li><li><p>BNF 中，非终结符用尖括号括起来，例如，<code>&lt;EXPR&gt;</code>，终结符用普通字符表示。而在 ABNF 中，非终结符用普通字符表示，终结符需要用双引号括起来，例如&quot;+&quot; ；</p></li><li><p>在 BNF 和 EBNF 中，“或”符号是 <code>|</code>，在 ABNF 中是 <code>/</code>；</p></li><li><p>EBNF 和 ABNF 还具有快捷语法语法，比如指定 0 或多个重复项。要将其用 BNF 表示，则需要引入更多规则。</p></li></ul><p>通常，BNF 更适合教学、解释和理论讨论。EBNF 和 ABNF 经常用于语法定义和解析器解析，其中 ABNF 更加利于解析器解析；</p><p>在一些语言的语法定义中，会使用一些不同于以上三者的产生式定义形式，但是都会包含 “定义为“、”或“、”终结符”、“非终结符“ 这几个元素。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,26),u={href:"https://zh.wikipedia.org/wiki/%E5%B7%B4%E7%A7%91%E6%96%AF%E8%8C%83%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},g={href:"https://zh.wikipedia.org/wiki/%E6%89%A9%E5%85%85%E5%B7%B4%E7%A7%91%E6%96%AF%E8%8C%83%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},p={href:"https://zh.wikipedia.org/wiki/%E6%89%A9%E5%B1%95%E5%B7%B4%E7%A7%91%E6%96%AF%E8%8C%83%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.jianshu.com/p/15efcb0c06c8",target:"_blank",rel:"noopener noreferrer"},F={href:"https://www.coursera.org/lecture/dmathgen/86-bnffan-shi-I1oLz",target:"_blank",rel:"noopener noreferrer"};function B(q,h){const e=r("ExternalLinkIcon");return d(),o("div",null,[s,t("p",null,[t("a",u,[n("巴科斯范式"),a(e)])]),t("p",null,[t("a",g,[n("扩充巴科斯范式"),a(e)])]),t("p",null,[t("a",p,[n("扩展巴科斯范式"),a(e)])]),t("p",null,[t("a",x,[n("语法格式描述规范BNF、EBNF、ABNF"),a(e)])]),t("p",null,[t("a",F,[n("Coursera-BNF范式"),a(e)])])])}const E=l(c,[["render",B],["__file","A.BNF.html.vue"]]),A=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/A.BNF.html","title":"BNF、ABNF、EBNF","lang":"zh-CN","frontmatter":{"description":"BNF、ABNF、EBNF BNF 是最原始，最简单的方法，主要用于理论背景的学术论文中，以与人类进行交流。BNF 没有确切的规范。 EBNF （Extended BNF 扩展BNF）没有一个标准的 EBNF，因为每个作者或程序都定义了自己的稍有不同的 EBNF 变体。 ABNF （ augmented BNF 增强BNF）的语法与 BNF 完全不同，...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/A.BNF.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"BNF、ABNF、EBNF"}],["meta",{"property":"og:description","content":"BNF、ABNF、EBNF BNF 是最原始，最简单的方法，主要用于理论背景的学术论文中，以与人类进行交流。BNF 没有确切的规范。 EBNF （Extended BNF 扩展BNF）没有一个标准的 EBNF，因为每个作者或程序都定义了自己的稍有不同的 EBNF 变体。 ABNF （ augmented BNF 增强BNF）的语法与 BNF 完全不同，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"BNF、ABNF、EBNF\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"BNF","slug":"bnf","link":"#bnf","children":[]},{"level":2,"title":"ABNF","slug":"abnf","link":"#abnf","children":[]},{"level":2,"title":"EBNF","slug":"ebnf","link":"#ebnf","children":[]},{"level":2,"title":"三者的不同","slug":"三者的不同","link":"#三者的不同","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":3.52,"words":1057},"filePathRelative":"计算机基础/编译原理/A.BNF.md","localizedDate":"2024年4月12日","autoDesc":true}');export{E as comp,A as data};
