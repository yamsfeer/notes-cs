import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as p,c as e,b as s,a as n,d as a}from"./app-BzW9chhs.js";const o={},c=s(`<h1 id="lr分析算法" tabindex="-1"><a class="header-anchor" href="#lr分析算法"><span>LR分析算法</span></a></h1><h2 id="lr-0-分析算法" tabindex="-1"><a class="header-anchor" href="#lr-0-分析算法"><span>LR(0)分析算法</span></a></h2><h3 id="算法思想" tabindex="-1"><a class="header-anchor" href="#算法思想"><span>算法思想</span></a></h3><p>假设有如下文法，分析串<code>xxy$</code>（<code>$</code>表示文件结束符EOF）。</p><div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>0: S&#39;-&gt; S$
1: S -&gt; x x T
2: T -&gt; y
</code></pre></div><p>移进过程用一个有限状态自动机表示如图。</p><p><em>其中状态1是开始状态，状态6是接受状态。</em></p><p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gtsbbk9nlcj60g805ljrm02.jpg" alt=""></p><p>对于分析串<code>xxy$</code>，分析过程如下图：</p><p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gtu0zuy0f0j60bd0bs74k02.jpg" alt=""></p><h3 id="lr-0-分析表" tabindex="-1"><a class="header-anchor" href="#lr-0-分析表"><span>LR(0)分析表</span></a></h3><p>将上节中的DFA转换成如下的LR(0)分析表：</p><table style="text-align:center;"><thead><tr><td></td><td colspan="3">动作（ACTION）</td><td colspan="3">转移（GOTO）</td></tr></thead><tbody><tr><td>状态 / 符号</td><td>x</td><td>y</td><td>$</td><td>S</td><td>T</td></tr><tr><td>1</td><td>s2</td><td></td><td></td><td>g6</td><td></td></tr><tr><td>2</td><td>s3</td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td>s4</td><td></td><td></td><td>g5</td></tr><tr><td>4</td><td>r2</td><td>r2</td><td>r2</td><td></td><td></td></tr><tr><td>5</td><td>r1</td><td>r1</td><td>r1</td><td></td><td></td></tr><tr><td>6</td><td></td><td></td><td>accept</td><td></td><td></td></tr></tbody></table><ul><li><p><em>s表示shift，即移进，s2表示移进到状态2</em></p></li><li><p><em>r表示reduce，即归约，r2表示根据产生式2进行归约</em></p></li><li><p><em>g表示goto，即跳转，g6表示转移到状态6</em></p></li><li><p><em>状态遇终结符要移进或归约，遇非终结符要跳转</em></p></li></ul><h3 id="lr-0-分析算法代码" tabindex="-1"><a class="header-anchor" href="#lr-0-分析算法代码"><span>LR(0)分析算法代码</span></a></h3><p>有了LR(0)分析表（ACTION表、GOTO表），结合移进-归约的过程，可以写出LR(0)分析算法的伪代码：</p><div class="language-c" data-ext="c" data-title="c"><pre class="language-c"><code>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">push</span><span class="token punctuation">(</span>$<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 文件结束符、初始状态1入栈</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  cur_state <span class="token operator">=</span> stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>
  action <span class="token operator">=</span> ACTION<span class="token punctuation">[</span>cur_state<span class="token punctuation">,</span> <span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 查ACTION表</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> <span class="token char">&#39;si&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 移进到状态i</span>
    <span class="token function">push</span><span class="token punctuation">(</span>cur_state<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> <span class="token char">&#39;rj&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 按产生式j进行归约</span>
    <span class="token comment">// 弹出产生式右部，压入左部</span>
    <span class="token function">pop</span><span class="token punctuation">(</span>right hand of production <span class="token string">&quot;j: X -&gt; ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">push</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>

    cur_state <span class="token operator">=</span> stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">push</span><span class="token punctuation">(</span>GOTO<span class="token punctuation">[</span>cur_state<span class="token punctuation">,</span> X<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 非终结符要查GOTO表</span>
  <span class="token keyword">else</span>
    <span class="token function">error</span><span class="token punctuation">(</span><span class="token char">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="lr-0-分析表构造算法" tabindex="-1"><a class="header-anchor" href="#lr-0-分析表构造算法"><span>LR(0)分析表构造算法</span></a></h3><div class="language-c" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">closure</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>C is still changing<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>C item i<span class="token operator">:</span> <span class="token string">&quot;A -&gt; beta $ B gamma&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      C<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>B <span class="token operator">-&gt;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">goto</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  temp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>C item i<span class="token operator">:</span> <span class="token string">&quot;A -&gt; beta $ x gamma&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    temp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>A <span class="token operator">-&gt;</span> beta x $ gamma<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">closure</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

C0 <span class="token operator">=</span> <span class="token function">closure</span><span class="token punctuation">(</span><span class="token string">&quot;S&#39; -&gt; $ S EOF&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
SET <span class="token operator">=</span> <span class="token punctuation">{</span>C0<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 用于防止重复检查</span>
Q <span class="token operator">=</span> <span class="token function">enQueue</span><span class="token punctuation">(</span>C0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>Q is not empty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  C <span class="token operator">=</span> <span class="token function">deQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">foreach</span><span class="token punctuation">(</span>x <span class="token function">in</span> <span class="token punctuation">(</span>Nonterminal and Terminal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    D <span class="token operator">=</span> <span class="token keyword">goto</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x in T<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 终结符移进</span>
      ACTION<span class="token punctuation">[</span>C<span class="token punctuation">,</span> x<span class="token punctuation">]</span> <span class="token operator">=</span> D<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 非终结符跳转</span>
      GOTO<span class="token punctuation">[</span>C<span class="token punctuation">,</span> x<span class="token punctuation">]</span> <span class="token operator">=</span> D<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>D not in SET<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 防止重复检查</span>
      SET<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">enQueue</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="表驱动的lr分析器架构" tabindex="-1"><a class="header-anchor" href="#表驱动的lr分析器架构"><span>表驱动的LR分析器架构</span></a></h3><p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gtu6ak066uj60ec07it8x02.jpg" alt=""></p><h3 id="lr-0-分析算法的缺点" tabindex="-1"><a class="header-anchor" href="#lr-0-分析算法的缺点"><span>LR(0)分析算法的缺点</span></a></h3><h4 id="错误定位" tabindex="-1"><a class="header-anchor" href="#错误定位"><span>错误定位</span></a></h4><h4 id="冲突" tabindex="-1"><a class="header-anchor" href="#冲突"><span>冲突</span></a></h4><h2 id="slr分析算法" tabindex="-1"><a class="header-anchor" href="#slr分析算法"><span>SLR分析算法</span></a></h2><p>SLR分析算法和LR(0)分析算法的基本步骤相同，仅区别于对<strong>归约的处理</strong>。</p>`,26),l=n("p",null,[a("对于状态"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"i")]),n("annotation",{encoding:"application/x-tex"},"i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6595em"}}),n("span",{class:"mord mathnormal"},"i")])])]),a("上的项目"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"N"),n("mo",null,"→"),n("mi",null,"a"),n("mi",{mathvariant:"normal"},"$")]),n("annotation",{encoding:"application/x-tex"},"N \\to a \\$")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"→"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8056em","vertical-align":"-0.0556em"}}),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord"},"$")])])]),a("，仅对"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"y"),n("mo",null,"∈"),n("mi",null,"F"),n("mi",null,"O"),n("mi",null,"L"),n("mi",null,"L"),n("mi",null,"O"),n("mi",null,"W"),n("mo",{stretchy:"false"},"("),n("mi",null,"N"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"y \\in FOLLOW(N)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7335em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"∈"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"FO"),n("span",{class:"mord mathnormal"},"LL"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"W"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),n("span",{class:"mclose"},")")])])]),a("添加"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"A"),n("mi",null,"C"),n("mi",null,"T"),n("mi",null,"I"),n("mi",null,"O"),n("mi",null,"N"),n("mo",{stretchy:"false"},"["),n("mi",null,"i"),n("mo",{separator:"true"},","),n("mi",null,"y"),n("mo",{stretchy:"false"},"]")]),n("annotation",{encoding:"application/x-tex"},"ACTION[i, y]")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"A"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"CT"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"ON"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),n("span",{class:"mclose"},"]")])])]),a("。")],-1),i=s('<ul><li>优点 <ul><li>有可能减少需要归约的情况</li><li>有可能去除移进-归约冲突</li></ul></li><li>缺点 <ul><li>仍有冲突出现的可能</li></ul></li></ul><h3 id="slr分析表的冲突" tabindex="-1"><a class="header-anchor" href="#slr分析表的冲突"><span>SLR分析表的冲突</span></a></h3><h2 id="lr-1-分析算法" tabindex="-1"><a class="header-anchor" href="#lr-1-分析算法"><span>LR(1)分析算法</span></a></h2>',3),u=[c,l,i];function r(m,d){return p(),e("div",null,u)}const g=t(o,[["render",r],["__file","3.7 LR分析算法.html.vue"]]),y=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.7%20LR%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95.html","title":"LR分析算法","lang":"zh-CN","frontmatter":{"description":"LR分析算法 LR(0)分析算法 算法思想 假设有如下文法，分析串xxy$（$表示文件结束符EOF）。 移进过程用一个有限状态自动机表示如图。 其中状态1是开始状态，状态6是接受状态。 对于分析串xxy$，分析过程如下图： LR(0)分析表 将上节中的DFA转换成如下的LR(0)分析表： s表示shift，即移进，s2表示移进到状态2 r表示reduc...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3.7%20LR%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"LR分析算法"}],["meta",{"property":"og:description","content":"LR分析算法 LR(0)分析算法 算法思想 假设有如下文法，分析串xxy$（$表示文件结束符EOF）。 移进过程用一个有限状态自动机表示如图。 其中状态1是开始状态，状态6是接受状态。 对于分析串xxy$，分析过程如下图： LR(0)分析表 将上节中的DFA转换成如下的LR(0)分析表： s表示shift，即移进，s2表示移进到状态2 r表示reduc..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gtsbbk9nlcj60g805ljrm02.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LR分析算法\\",\\"image\\":[\\"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gtsbbk9nlcj60g805ljrm02.jpg\\",\\"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gtu0zuy0f0j60bd0bs74k02.jpg\\",\\"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gtu6ak066uj60ec07it8x02.jpg\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"LR(0)分析算法","slug":"lr-0-分析算法","link":"#lr-0-分析算法","children":[{"level":3,"title":"算法思想","slug":"算法思想","link":"#算法思想","children":[]},{"level":3,"title":"LR(0)分析表","slug":"lr-0-分析表","link":"#lr-0-分析表","children":[]},{"level":3,"title":"LR(0)分析算法代码","slug":"lr-0-分析算法代码","link":"#lr-0-分析算法代码","children":[]},{"level":3,"title":"LR(0)分析表构造算法","slug":"lr-0-分析表构造算法","link":"#lr-0-分析表构造算法","children":[]},{"level":3,"title":"表驱动的LR分析器架构","slug":"表驱动的lr分析器架构","link":"#表驱动的lr分析器架构","children":[]},{"level":3,"title":"LR(0)分析算法的缺点","slug":"lr-0-分析算法的缺点","link":"#lr-0-分析算法的缺点","children":[]}]},{"level":2,"title":"SLR分析算法","slug":"slr分析算法","link":"#slr分析算法","children":[{"level":3,"title":"SLR分析表的冲突","slug":"slr分析表的冲突","link":"#slr分析表的冲突","children":[]}]},{"level":2,"title":"LR(1)分析算法","slug":"lr-1-分析算法","link":"#lr-1-分析算法","children":[]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":2.46,"words":737},"filePathRelative":"计算机基础/编译原理/3.7 LR分析算法.md","localizedDate":"2024年4月12日","autoDesc":true}');export{g as comp,y as data};
