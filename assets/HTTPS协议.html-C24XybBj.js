import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as r,c as i,a as e,d as c,e as p,b as o}from"./app-BzW9chhs.js";const n={},l=o('<h1 id="https" tabindex="-1"><a class="header-anchor" href="#https"><span>https</span></a></h1><p>https 的意思是安全的 http，s 表示 secure。</p><h2 id="ssl" tabindex="-1"><a class="header-anchor" href="#ssl"><span>SSL</span></a></h2><p>https 在 http 协议的传输层和应用层间增加了一层，称为 SSL ( Secure Socket Layer 安全套接字层 ) 。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>SSL 在 3.0 版本后被标准化，称为 TLS，为方便记忆，这里统称 SSL。</p></div><p>SSL 的作用是使用非对称加密算法传递一个随机字符串，再将这个随机字符串作为对称加密的密钥传递数据。</p><p>大致流程如下：</p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/SSL握手.png" style="zoom:85%;" class="img-mid"><ol><li>client 发起请求</li><li>server 发送公钥 ( 其实是证书，后面会介绍 ) 给 client</li><li>client 用发过来的公钥加密随机字符串 key，然后发送给 server</li><li>server 用私钥解密，得到 key</li><li>key 作为对称加密的密钥，双方用对称加密传输数据</li></ol><p>一句话总结以上过程就是：<strong>非对称加密传输密钥，对称加密传输数据</strong>。</p><h2 id="中间人攻击" tabindex="-1"><a class="header-anchor" href="#中间人攻击"><span>中间人攻击</span></a></h2><p>使用非对称加密算法，都会有中间人攻击 ( man-in-the-middle MITM ) 的问题。</p><p>如果一开始，攻击者用自己的 public key 代替 server 的 public 发送给客户端，而 client 在不知情的情况下，使用攻击者的 public key 加密，攻击者就可以作为 client 和 server 两端的中间人，分别伪装成两方进行通信，从而窃取所有信息。</p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/中间人攻击.png" style="zoom:70%;" class="img-mid"><p>如果 client 能确保收到的 public key 是真正的 server public key，攻击者就无法伪装了。这需要第三方机构作保证。</p><h2 id="ca证书" tabindex="-1"><a class="header-anchor" href="#ca证书"><span>CA证书</span></a></h2><p>CA ( Certificate Authority，证书授权) 是一个第三方机构。</p><p>服务端把域名、组织名、和公钥等数据发送给 CA，CA 用<strong>私钥</strong>对数据加密得到密文，称为签名，然后将签名和原始明文发送回服务器，签名和原始明文加在一起称为 CA 证书。</p><p>客户端收到证书，用 CA 的<strong>公钥</strong>解密，比对解密后的公钥和原始明文中的公钥，即可判断公钥是否是正确的。</p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/https-CA.png" style="zoom:80%;" class="img-mid"><p>在 chrome 浏览器中，可以在开发者工具的 security 面板中，点击 <code>view certificate</code> 按钮，查看当前网站的证书信息。</p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/CA证书.png" alt="iCA证书" style="zoom:45%;" class="img-mid"><p>也可以通过 <code>chrome://settings/security</code> 页面的 <code>Manage device certificates</code> 按钮查看当前系统的证书。</p><h3 id="证书透明-ct" tabindex="-1"><a class="header-anchor" href="#证书透明-ct"><span>证书透明 CT</span></a></h3><p>为防止 CA 机构颁发错误的证书，我们需要用去中心化手段实现证书透明 ( Certificate Transparency ) 。</p><p>具体来说就是：</p><ul><li><p>CA 每颁发一个证书，都需要向日志服务 LOG 提交证书的详情</p></li><li><p>LOG 记录后，向 CA返回 SCT 数据，SCT 中包含了用 LOG 私钥加密的数据，相当于 LOG 的签名</p></li><li><p>CA 将 SCT 作为拓展加入证书中发给服务器，服务器再发给客户端</p></li><li><p>客户端收到证书后，不仅需要向 CA 验证证书的真实性，还需要向 LOG 验证 SCT</p></li></ul><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/https-CA-CT.png" style="zoom:85%;" class="img-mid"><p>为了实现 CA 的证书透明，在 CA 机制基础上添加了一层 CT 机制，CT 机制的原理如下：</p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/https-CT.png" style="zoom:80%;" class="img-mid"><p>CA 每次颁发证书都是一条记录，每两条记录分别计算其 hash 值组合成父节点，最终直到根节点，根节点的 hash 值称为 root hash，只需检查 root hash 就可以判断 CA 是否颁发了错误的节点。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>',32),h={href:"https://www.bilibili.com/video/BV1uY4y1D7Ng/?spm_id_from=333.788&vd_source=0de1212e1a5de639602eb19cc0aacc0b",target:"_blank",rel:"noopener noreferrer"};function m(d,S){const t=a("ExternalLinkIcon");return r(),i("div",null,[l,e("p",null,[e("a",h,[c("https技术鉴赏"),p(t)])])])}const u=s(n,[["render",m],["__file","HTTPS协议.html.vue"]]),y=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%9A%E8%AF%86/HTTPS%E5%8D%8F%E8%AE%AE.html","title":"https","lang":"zh-CN","frontmatter":{"description":"https https 的意思是安全的 http，s 表示 secure。 SSL https 在 http 协议的传输层和应用层间增加了一层，称为 SSL ( Secure Socket Layer 安全套接字层 ) 。 相关信息 SSL 在 3.0 版本后被标准化，称为 TLS，为方便记忆，这里统称 SSL。 SSL 的作用是使用非对称加密算法传递...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%9A%E8%AF%86/HTTPS%E5%8D%8F%E8%AE%AE.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"https"}],["meta",{"property":"og:description","content":"https https 的意思是安全的 http，s 表示 secure。 SSL https 在 http 协议的传输层和应用层间增加了一层，称为 SSL ( Secure Socket Layer 安全套接字层 ) 。 相关信息 SSL 在 3.0 版本后被标准化，称为 TLS，为方便记忆，这里统称 SSL。 SSL 的作用是使用非对称加密算法传递..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"https\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"SSL","slug":"ssl","link":"#ssl","children":[]},{"level":2,"title":"中间人攻击","slug":"中间人攻击","link":"#中间人攻击","children":[]},{"level":2,"title":"CA证书","slug":"ca证书","link":"#ca证书","children":[{"level":3,"title":"证书透明 CT","slug":"证书透明-ct","link":"#证书透明-ct","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":3.1,"words":929},"filePathRelative":"计算机基础/计算机通识/HTTPS协议.md","localizedDate":"2024年4月12日","autoDesc":true}');export{u as comp,y as data};
