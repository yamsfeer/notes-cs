import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-BzW9chhs.js";const p={},o=t(`<h1 id="滑动窗口" tabindex="-1"><a class="header-anchor" href="#滑动窗口"><span>滑动窗口</span></a></h1><p>滑动窗口属于快慢指针的一种，两个指针之间的部分就是窗口，算法通过扩大或缩小窗口来解决问题。</p><p>滑动窗口的整体代码如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  window<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 增大窗口</span>
  right<span class="token operator">++</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>window needs shrink<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 缩小窗口</span>
    left<span class="token operator">++</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>滑动窗口通常用于处理<strong>字符串子串</strong>的问题，滑动窗口的整体思路不难，难的是各种细节，比如如何向窗口中添加新元素，如何缩小窗口，在窗口滑动的哪个阶段更新结果等。</p><p>滑动窗口算法的代码框架：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">slideWindow</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> r <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token comment">// 将要进入窗口的字符</span>
    window<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
    right<span class="token operator">++</span> <span class="token comment">// 增大窗口</span>
    <span class="token comment">// ... 进行窗口内数据更新</span>

		<span class="token comment">// debug(left, right)</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> window needs shrink<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> l <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token comment">// 将要移出窗口的字符</span>
      window<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>
      left<span class="token operator">++</span>
      <span class="token comment">// ... 进行窗口内数据更新</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>虽然有一个嵌套的 while 循环，但算法的时间复杂度仍是 O(n)。因为字符串中的每个元素都<strong>只会进入窗口一次</strong>，然后<strong>被移出窗口一次</strong>。</p><h2 id="最小覆盖子串-76" tabindex="-1"><a class="header-anchor" href="#最小覆盖子串-76"><span>最小覆盖子串 ( 76 )</span></a></h2><p>在一个字符串 source 中找出包含 target 字符串中所有字符的最短子串。</p><p>整个算法的思路如下：</p><ol><li>定义一个左开右闭区间 [left, right) 作为窗口</li><li>不断增大 right 扩大窗口，直到窗口中的子串包含 target 所有字符</li><li>停止增加 right，转而增加 left 使窗口缩小，直到窗口子串不符合要求，即不再包含 target 所有字符</li><li>重复 2、3 步，直到 right 到达 source 的尾部</li></ol><p>第 2 步相当于寻找一个可行解，第 3 步优化这个可行解，最终找到最优解。</p><p>左右指针轮流前进，窗口大小增增减减，窗口不断向右滑动，这就是滑动窗口。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>理论上窗口区间可以用 [left, right] 或 (left, right)</p><ul><li>[left, right)：初始化时 [0, 0) 中没有元素，right 向右移动一位后 [0, 1) 包含一个元素</li><li>(left, right)：right 向右移动一位后 (0, 1) 仍然没有元素</li><li>[left, right]：初始区间 [0, 0] 就包含了一个元素</li></ul><p>[left, right) 是最方便的，其余两种情况都会给边界处理带来不必要的麻烦。</p></div><p>最小覆盖子串的最终代码：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">minWindow</span><span class="token punctuation">(</span><span class="token parameter">src<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> need <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> c <span class="token keyword">of</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 统计target中的字符数</span>
    need<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
      <span class="token operator">?</span> need<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> need<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> need<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token comment">/* 每当窗口内某个字符个数满足条件，自增 1，
     当 count === needs.size 时，找到一个可行解 */</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> src<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> c <span class="token operator">=</span> src<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token comment">// 将要移入窗口的字符</span>
    right<span class="token operator">++</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
        <span class="token operator">?</span> window<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> window<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">===</span> need<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 覆盖完一个字符</span>
        count<span class="token operator">++</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> need<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 收缩前，判断当前可行解是否更优</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        start <span class="token operator">=</span> left
        len <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> c <span class="token operator">=</span> src<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token comment">// 将要移出窗口的字符</span>
      left<span class="token operator">++</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">===</span> need<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          count<span class="token operator">--</span>
        <span class="token punctuation">}</span>
        window<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> len <span class="token operator">!==</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span>
    <span class="token operator">?</span> src<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> start <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li>当我们发现 window 中的某个字符的数量等于 need 的所需数量，说明有一个字符覆盖完成了。</li><li>当所有字符都满足 need 中的数量，即 <code>count === need.size</code>，说明我们已经得到一个可行的子串，但还不是最小的，此时需要缩小窗口</li><li>缩小窗口前，要判断当前可行解是否更优</li><li>缩小窗口并记录子串长度，直到不满足 <code>count === need.size</code>，然后继续扩大窗口</li></ul><h2 id="字符串排列-567" tabindex="-1"><a class="header-anchor" href="#字符串排列-567"><span>字符串排列 ( 567 )</span></a></h2><p>判断字符串 source 中是否包含由 target 的字符排列而成的子串。</p><p>相当给你一个 source 和一个 target，求 source 中是否存在一个子串，包含 target 中所有字符且不包含其他字符。</p><p>这个问题和上面的“最小覆盖子串”问题相比，可行解的限制条件更严格了，这个问题也是用滑动窗口算法。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">checkInclusion</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 先统计 target 的字符数</span>
  <span class="token keyword">const</span> needs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token keyword">of</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    needs<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> needs<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">?</span> needs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span>
    win<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// [left, right) 为窗口</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> source<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> char <span class="token operator">=</span> source<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
    right<span class="token operator">++</span> <span class="token comment">// 扩大窗口</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>needs<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      win<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> win<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">===</span> needs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count<span class="token operator">++</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 由于子串是 target 的排列，长度肯定相等，所以窗口内子串长度等于target时即可收缩窗口</span>
    <span class="token comment">// 注意，right已经++，所以长度不是 right - left + 1</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">===</span> target<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> needs<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 长度相同，且字符数相同，找到解</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span> char <span class="token operator">=</span> source<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>needs<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        win<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> win<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 移出窗口</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">&lt;</span> needs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 移出后不满足</span>
          count<span class="token operator">--</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      left<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这个问题基本和最小覆盖子串一样，只是子串中不能有 target 以外的字符。因此</p><ul><li>缩小窗口的时机是窗口大小等于 size 时，因为子串是由 target 排列而来</li><li>当 <code>count == need.size</code> 时，说明窗口中就是一个合法的排列，可以返回</li></ul><h2 id="找出所有字母异位词-438" tabindex="-1"><a class="header-anchor" href="#找出所有字母异位词-438"><span>找出所有字母异位词 ( 438 )</span></a></h2><p>所谓字母异位词，就是字符串排列，这和上面的字符串排列是一样的，只是返回结果有点变化。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span><span class="token parameter">src<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> src<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&gt;=</span> target<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>valid <span class="token operator">===</span> need<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token comment">// 将起始坐标放入</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
 	<span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre></div><h2 id="最长无重复子串-3" tabindex="-1"><a class="header-anchor" href="#最长无重复子串-3"><span>最长无重复子串 ( 3 )</span></a></h2><p>找出一个字符串中的最长无重复子串。</p><p>这道题比前面要简单，有两点需要注意：</p><ul><li>当 <code>window.get(c) &gt; 1</code> 说明窗口中存在重复字符，此时应该缩小窗口。</li><li>当缩小窗口完成后，窗口中是没有重复字符的，此时应该更新长度记录</li></ul><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> maxlen <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">const</span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token operator">++</span><span class="token punctuation">]</span>
    window<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    	<span class="token operator">?</span> window<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    	<span class="token operator">:</span> window<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 有重复，收缩窗口</span>
      <span class="token keyword">let</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span>
      window<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    maxlen <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxlen<span class="token punctuation">,</span> right <span class="token operator">-</span> left<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> maxlen
<span class="token punctuation">}</span>
</code></pre></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>滑动窗口通常解决这样的问题：给定字符串 source，求 source 中一段满足特定条件的子串。</p><p>使用滑动窗口有三个问题要思考：</p><ul><li>什么时候扩大窗口？字符加入窗口时，应更新哪些数据？</li><li>什么时候缩小窗口？字符移出窗口时，应更新哪些数据？</li><li>什么时候更新可行解？扩大窗口时还是缩小窗口时？</li></ul>`,37),e=[o];function c(l,u){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","1.1.滑动窗口.html.vue"]]),d=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/leetcode/1.1.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.html","title":"滑动窗口","lang":"zh-CN","frontmatter":{"description":"滑动窗口 滑动窗口属于快慢指针的一种，两个指针之间的部分就是窗口，算法通过扩大或缩小窗口来解决问题。 滑动窗口的整体代码如下： 滑动窗口通常用于处理字符串子串的问题，滑动窗口的整体思路不难，难的是各种细节，比如如何向窗口中添加新元素，如何缩小窗口，在窗口滑动的哪个阶段更新结果等。 滑动窗口算法的代码框架： 虽然有一个嵌套的 while 循环，但算法的时...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E7%BC%96%E7%A8%8B/leetcode/1.1.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"滑动窗口"}],["meta",{"property":"og:description","content":"滑动窗口 滑动窗口属于快慢指针的一种，两个指针之间的部分就是窗口，算法通过扩大或缩小窗口来解决问题。 滑动窗口的整体代码如下： 滑动窗口通常用于处理字符串子串的问题，滑动窗口的整体思路不难，难的是各种细节，比如如何向窗口中添加新元素，如何缩小窗口，在窗口滑动的哪个阶段更新结果等。 滑动窗口算法的代码框架： 虽然有一个嵌套的 while 循环，但算法的时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"滑动窗口\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"最小覆盖子串 ( 76 )","slug":"最小覆盖子串-76","link":"#最小覆盖子串-76","children":[]},{"level":2,"title":"字符串排列 ( 567 )","slug":"字符串排列-567","link":"#字符串排列-567","children":[]},{"level":2,"title":"找出所有字母异位词 ( 438 )","slug":"找出所有字母异位词-438","link":"#找出所有字母异位词-438","children":[]},{"level":2,"title":"最长无重复子串 ( 3 )","slug":"最长无重复子串-3","link":"#最长无重复子串-3","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":5.54,"words":1663},"filePathRelative":"编程/leetcode/1.1.滑动窗口.md","localizedDate":"2024年4月12日","autoDesc":true}');export{r as comp,d as data};
