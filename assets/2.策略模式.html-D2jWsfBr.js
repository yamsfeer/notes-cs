import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as e,a as n,d as a,e as c,b as l}from"./app-BzW9chhs.js";const u={},k=l(`<h1 id="策略模式" tabindex="-1"><a class="header-anchor" href="#策略模式"><span>策略模式</span></a></h1><p>策略模式的定义是：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。</p><p>假设我们需要一个 calculateBouns 函数计算员工的奖金，奖金数由考核等级和工资数的乘积决定。于是，calculateBouns 函数可以这样实现：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">calculateBouns</span><span class="token punctuation">(</span><span class="token parameter">salary<span class="token punctuation">,</span> performanceLevel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>performanceLevel <span class="token operator">===</span> <span class="token string">&#39;S&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">4</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>performanceLevel <span class="token operator">===</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">3</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>performanceLevel <span class="token operator">===</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">2</span>
<span class="token punctuation">}</span>

<span class="token function">calculateBouns</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token string">&#39;S&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 40000</span>
<span class="token function">calculateBouns</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 60000</span>
</code></pre></div><p>这段代码很简单，但存在明显的缺点：</p><ul><li>包含太多 if-else 分支语句</li><li>缺乏弹性。如果新增一种考核等级 C，或者需要改变 S 级的计算方式，则需要深入的 calculateBouns 函数内部修改，这是违反开放-封闭原则的</li><li>算法复用性差。如果需要在其他地方使用这些算法，则只能复制粘贴代码</li></ul><p>其中一种改进是：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">performanceS</span><span class="token punctuation">(</span><span class="token parameter">salary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">4</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">performanceA</span><span class="token punctuation">(</span><span class="token parameter">salary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">3</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">performanceB</span><span class="token punctuation">(</span><span class="token parameter">salary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">calculateBouns</span><span class="token punctuation">(</span><span class="token parameter">salary<span class="token punctuation">,</span> performanceLevel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>performanceLevel <span class="token operator">===</span> <span class="token string">&#39;S&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">performanceS</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>performanceLevel <span class="token operator">===</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">performanceA</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>performanceLevel <span class="token operator">===</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">performanceB</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>然而，这样修改只是解决了上述缺点中的第三点，我们仍无法消除 if-else 分支。为此，我们需要用策略模式解决。</p><p>策略模式至少由两部分组成。一个是策略 strategy，strategy 封装了具体的算法，并负责具体的计算过程。 另一个是环境 context，context 接受请求，并把请求委托给某一个策略。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> strategies <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">// context</span>
  <span class="token constant">S</span><span class="token punctuation">(</span><span class="token parameter">salary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// strategy</span>
  <span class="token constant">A</span><span class="token punctuation">(</span><span class="token parameter">salary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// strategy</span>
  <span class="token constant">B</span><span class="token punctuation">(</span><span class="token parameter">salary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> salary <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// strategy</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">calculateBouns</span><span class="token punctuation">(</span><span class="token parameter">salary<span class="token punctuation">,</span> performanceLevel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> strategies<span class="token punctuation">[</span>performanceLevel<span class="token punctuation">]</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>通过策略模式，我们消除了大片的条件分支语句。替换 context 中当前保存的策略对象，便能执行不同的算法来得到想要的结果。</p><h2 id="缓动动画" tabindex="-1"><a class="header-anchor" href="#缓动动画"><span>缓动动画</span></a></h2><p>我们目标是编写一个动画类和一些缓动算法，让小球以各种缓动效果在页面中运动。</p><p>在运动开始之前，需要提前记录一些有用的信息，至少包括:</p><ul><li>动画开始时的时间点</li><li>动画开始时，小球所在的原始位置</li><li>小球移动的目标位置</li><li>小球运动持续的时间</li></ul><p>先来看看缓动算法，缓动算法接受 4 个参数，分别是动画已消耗的时间 timestamp、小球原始位置 beginning、小球目标位置 change、动画持续的总时间 duration，返回值则是小球应该处在的当前位置。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> tween <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">linear</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> c <span class="token operator">*</span> t <span class="token operator">/</span> d <span class="token operator">+</span> b<span class="token punctuation">,</span>
  <span class="token function-variable function">easeIn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> c <span class="token operator">*</span> <span class="token punctuation">(</span> t <span class="token operator">/=</span> d <span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> b<span class="token punctuation">,</span>
  <span class="token function-variable function">strongEaseIn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> c <span class="token operator">*</span> <span class="token punctuation">(</span> t <span class="token operator">/=</span> d <span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> b<span class="token punctuation">,</span>
  <span class="token function-variable function">strongEaseOut</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span> t <span class="token operator">=</span> t <span class="token operator">/</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">,</span>
  <span class="token function-variable function">sineaseIn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> c <span class="token operator">*</span> <span class="token punctuation">(</span> t <span class="token operator">/=</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> b<span class="token punctuation">,</span>
  <span class="token function-variable function">sineaseOut</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> c <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> t <span class="token operator">=</span> t <span class="token operator">/</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>下面来编写动画类，在 JavaScript 中，可以用函数实现动画类的功能。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token parameter">startPos<span class="token punctuation">,</span> endPos<span class="token punctuation">,</span> duration<span class="token punctuation">,</span> easing<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span>

  <span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 计算当前小球应该处于什么位置</span>
    <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&gt;=</span> startTime <span class="token operator">+</span> duration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span>endPos<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> pos <span class="token operator">=</span> <span class="token function">easing</span><span class="token punctuation">(</span>t <span class="token operator">-</span> startTime<span class="token punctuation">,</span> startPos<span class="token punctuation">,</span> endPos <span class="token operator">-</span> startPos<span class="token punctuation">,</span> duration<span class="token punctuation">)</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">const</span> interval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> isDone <span class="token operator">=</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 不断计算小球位置</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isDone<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">clearInterval</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>animate 函数会启动一个定时器并不断调用 step 函数，step 函数代表小球运动每一帧要做的事，即调用缓动函数计算当前小球应该处于的位置，计算得出的数值会被传入回调函数，实际更新小球位置的调用。</p><p>animate 函数执行起来是这样的：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// left 变化到 100px，动画持续 2 秒，缓动算法为 easeIn </span>
<span class="token function">animate</span><span class="token punctuation">(</span>
  div<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token comment">// startPos</span>
  <span class="token number">100</span><span class="token punctuation">,</span> <span class="token comment">//endPos</span>
  <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token comment">// duration</span>
  tween<span class="token punctuation">.</span>easeIn<span class="token punctuation">,</span> <span class="token comment">// easing</span>
  <span class="token parameter">pos</span> <span class="token operator">=&gt;</span> div<span class="token punctuation">.</span>style<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> pos <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span> <span class="token comment">// callback</span>
<span class="token punctuation">)</span>
</code></pre></div><p>上面缓动动画的例子中，tween 对象就是策略模式的 context 对象，它保存了多个缓动算法，每个缓动算法是一个策略。</p><p>策略模式的实现并不复杂，关键是如 何从策略模式的实现背后，找到封装变化、委托和多态性这些思想的价值。</p><h2 id="表单校验" tabindex="-1"><a class="header-anchor" href="#表单校验"><span>表单校验</span></a></h2><p>在引入策略模式前，一个表单验证的代码也许是这样的：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;form&#39;</span><span class="token punctuation">)</span>
form<span class="token punctuation">.</span><span class="token function-variable function">onsubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>form<span class="token punctuation">.</span>userName<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;用户名不能为空&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;密码长度不能少于 6 位&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^1[3|5|8][0-9]{9}$)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>phone<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;手机号码格式不正确&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这段代码和计算奖金的最初版本有着相同的缺点。下面用策略模式重构。</p><p>先将各种表单验证策略封装起来。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> rules <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> errMSg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> errMsg    
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">minLength</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> length<span class="token punctuation">,</span> errMsg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> errMsg
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">isMobile</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> errMsg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^1[3|5|8][0-9]{9}$)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> errMsg
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在写 Validator 类之前，先看看它是怎么使用的，这有助于理解 Validator 类。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  
  validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>userName<span class="token punctuation">,</span> rules<span class="token punctuation">.</span>isNotEmpty<span class="token punctuation">,</span> <span class="token string">&#39;用户名不能为空&#39;</span><span class="token punctuation">)</span>
  validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>password<span class="token punctuation">,</span> rules<span class="token punctuation">.</span>minLength<span class="token punctuation">,</span> <span class="token string">&#39;密码长度不能少于6位&#39;</span><span class="token punctuation">)</span>
  validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>phone<span class="token punctuation">,</span> rules<span class="token punctuation">.</span>isMobile<span class="token punctuation">,</span> <span class="token string">&#39;手机号码格式不正确&#39;</span><span class="token punctuation">)</span>
  
  <span class="token keyword">return</span> validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>validator 对象通过 add 方法添加一条检验规则，add 方法接受三个参数，分别是需要检验的表单项、检验策略函数、错误信息。</p><p>Validator 类就比较容易写了，只需要将 add 方法传入的检验规则用函数包裹并保存，当调用 validate 函数进行表单验证时调用这些函数。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Validator</span> <span class="token punctuation">{</span>
  cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">dom<span class="token punctuation">,</span> rule<span class="token punctuation">,</span> errMsg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">rule</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> <span class="token punctuation">[</span>dom<span class="token punctuation">.</span>value<span class="token punctuation">,</span> errMSg<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> fun <span class="token keyword">of</span> caches<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> msg
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果需要对单个表单项进行多项验证，只需用一个对象将表单项和校验函数对应起来就行了，这里不多介绍。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>在 JavaScript 中，策略模式就是将一系列独立的算法封装成函数，然后用一个 context 对象持有这些函数，并在需要的时候将请求委托给这些函数。通常策略模式的结构如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> strategies <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">A</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;strategyA&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">B</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;strategyB&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">C</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;strategyC&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

strategies<span class="token punctuation">[</span>condition<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 根据不同的情况选择策略</span>
</code></pre></div><p>本文还介绍了两个使用策略模式重构的例子：缓动动画、表单验证。</p><p>缓动动画的 tween 对象和表单验证中的 rules 对象都是策略模式的体现。</p>`,42),r={href:"https://juejin.cn/post/6915324526356070407",target:"_blank",rel:"noopener noreferrer"};function i(d,m){const s=p("ExternalLinkIcon");return o(),e("div",null,[k,n("p",null,[a("缓动动画的计算方法值得注意，通过将小球起始位置、当前位置、目标位置、动画持续时间这 4 个参数传入缓动算法，可以得出小球此时应该处在的位置。关于缓动动画的原理参考文章："),n("a",r,[a("缓动公式小析"),c(s)])])])}const y=t(u,[["render",i],["__file","2.策略模式.html.vue"]]),v=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2.%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html","title":"策略模式","lang":"zh-CN","frontmatter":{"description":"策略模式 策略模式的定义是：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。 假设我们需要一个 calculateBouns 函数计算员工的奖金，奖金数由考核等级和工资数的乘积决定。于是，calculateBouns 函数可以这样实现： 这段代码很简单，但存在明显的缺点： 包含太多 if-else 分支语句 缺乏弹性。如果新增一种考核等...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2.%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"策略模式"}],["meta",{"property":"og:description","content":"策略模式 策略模式的定义是：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。 假设我们需要一个 calculateBouns 函数计算员工的奖金，奖金数由考核等级和工资数的乘积决定。于是，calculateBouns 函数可以这样实现： 这段代码很简单，但存在明显的缺点： 包含太多 if-else 分支语句 缺乏弹性。如果新增一种考核等..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"策略模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"缓动动画","slug":"缓动动画","link":"#缓动动画","children":[]},{"level":2,"title":"表单校验","slug":"表单校验","link":"#表单校验","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":5.55,"words":1666},"filePathRelative":"编程/设计模式/2.策略模式.md","localizedDate":"2024年4月12日","autoDesc":true}');export{y as comp,v as data};
