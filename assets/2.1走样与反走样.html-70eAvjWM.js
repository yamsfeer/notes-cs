import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as i,c as t,b as a}from"./app-BzW9chhs.js";const n={},s=a('<h1 id="走样与反走样" tabindex="-1"><a class="header-anchor" href="#走样与反走样"><span>走样与反走样</span></a></h1><p>对屏幕的采样后，我们得到了以下光栅化的结果，图片有严重的锯齿 <em>( jaggies )</em>。</p><img class="img-mid" src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/e6c9d24egy1h3ky9u420kj20ky0j274v.jpg" alt="image-20220626001736439" style="zoom:33%;"><p>为什么会出现锯齿以及如何抗锯齿是本节要介绍的内容。</p><h2 id="走样-aliasing" tabindex="-1"><a class="header-anchor" href="#走样-aliasing"><span>走样 ( Aliasing )</span></a></h2><p>采样在图形学中是广泛存在的。采样出现问题时会产生 <em>Sampling Artifacts</em>，意为一切不准确或不希望看到的结果。此时称之为<strong>走样</strong>。</p><p>常见的走样：</p><ul><li>锯齿 <em>( Jaggies )</em></li><li>摩尔纹 <em>( Moire )</em></li><li>车轮效应 <em>( wagon wheel effect )</em></li><li>...</li></ul><p>走样的原因是：信号变化太快，采样速度太慢。</p><h2 id="频域-frequency-domain" tabindex="-1"><a class="header-anchor" href="#频域-frequency-domain"><span>频域 ( frequency domain )</span></a></h2><p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/e6c9d24egy1h3mttct15vj211q0j2q51.jpg" alt=""></p><h2 id="反走样-antialiasing" tabindex="-1"><a class="header-anchor" href="#反走样-antialiasing"><span>反走样 ( Antialiasing )</span></a></h2><h3 id="滤波" tabindex="-1"><a class="header-anchor" href="#滤波"><span>滤波</span></a></h3><img class="img-mid" src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/e6c9d24egy1h3mv06sv84j210009o74w.jpg" alt="image-20220627140045358" style="zoom:50%;"><img class="img-mid" src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/e6c9d24egy1h3mv083bu1j21080c8wfd.jpg" alt="截屏2022-06-27 14.01.18" style="zoom:50%;"><h3 id="其他类型抗锯齿" tabindex="-1"><a class="header-anchor" href="#其他类型抗锯齿"><span>其他类型抗锯齿</span></a></h3><ul><li><p>快速近似抗锯齿（Fast Approximate Anti-Aliasing，简称FXAA）：大致上来说，该方法是在得到最终图像后的一种处理，通过分析最终得到的图像，找到锯齿边缘，通过柔化、模糊等方式处理锯齿边缘，降低锯齿的可视性，来达到抗锯齿的目的。FXAA具有消耗低，速度快的优点。</p></li><li><p>时间性抗锯齿（Temporal Anti-Aliasing，简称TAA）：和一般的抗锯齿对像素的采样不同，TAA是对时间的采样，将上一帧已经得到的结果，作为当前帧的参考，避免直接计算当前帧像素的颜色值，而是复用或着说参考像素在之前帧的颜色值。会导致画面比较模糊，且对于运动的物体效果会很不好。TAA有升级版，即TXAA，实际为TAA+MSAA的组合。</p></li><li><p>子像素增强抗锯齿（Enhanced Subpixel Morphological Anti-Aliasing，简称SMAA）：原理上基本和FXAA类似，但相较于FXAA会更清晰，不过在运动画面中，锯齿抖动会很严重。</p></li><li><p>覆盖采样抗锯齿（Coverage Sampling Anti-Aliasing，简称CSAA）：是一种覆盖的采样，大致原理是将多边形边缘部分的像素，替换覆盖为在硬件或驱动程序中预先计算好的像素，能够以最高的效率对多边形边缘进行采样，资源占用极低。</p></li><li><p>可编程过滤抗锯齿（Custom Filter Anti-Aliasing，简称CFAA）：本质上来说是对MSAA的一种优化，和MSAA将每个像素都划分子像素不同，CFAA只选择对锯齿现象影响较大的部分像素进行子像素划分，而其它像素仍然以像素中心作为采样点，以较少的性能牺牲达到抗锯齿的效果。</p></li><li><p>多帧采样抗锯齿（Multi-Frame Sampled Anti-Aliasing，简称MFAA）：和NVIDIA高度绑定，和TAA类似，是对时间的采样，大致理解为对相邻两帧都进行一次抗锯齿采样，然后通过NVIDIA开发的图像合成处理技术来整合采样结果，然后输出一帧抗锯齿的图像。</p></li><li><p>深度学习超采样（Deep Learning Super Sampling，简称DLSS）：是超分辨率（Super Resolution）的一种解决方案，所谓超分辨率，就是将一张分辨率更小的图放大成一张分辨率更大的图，在这个过程中会产生很严重的锯齿，需要通过一些方法（比如深度学习）来处理这些锯齿。本质上还是采样率不够，想将一张低分辨率的图放大为高分辨率，因为增加了原来没有的像素点，必然导致细节缺失，既然缺失了，就想办法补全，怎么补？猜出来。而深度学习就是非常擅长猜的技术。需要注意的是，超分辨率及DLSS，严格来说和抗锯齿不是一回事，但本质上相同，即通过DLSS来解决超分辨中的锯齿问题，也达到了抗锯齿的目的。</p></li></ul>',17),l=[s];function r(m,o){return i(),t("div",null,l)}const g=e(n,[["render",r],["__file","2.1走样与反走样.html.vue"]]),h=JSON.parse('{"path":"/%E5%9B%BE%E5%BD%A2%E5%AD%A6/games101/2.1%E8%B5%B0%E6%A0%B7%E4%B8%8E%E5%8F%8D%E8%B5%B0%E6%A0%B7.html","title":"走样与反走样","lang":"zh-CN","frontmatter":{"description":"走样与反走样 对屏幕的采样后，我们得到了以下光栅化的结果，图片有严重的锯齿 ( jaggies )。 image-20220626001736439 为什么会出现锯齿以及如何抗锯齿是本节要介绍的内容。 走样 ( Aliasing ) 采样在图形学中是广泛存在的。采样出现问题时会产生 Sampling Artifacts，意为一切不准确或不希望看到的结果...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E5%9B%BE%E5%BD%A2%E5%AD%A6/games101/2.1%E8%B5%B0%E6%A0%B7%E4%B8%8E%E5%8F%8D%E8%B5%B0%E6%A0%B7.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"走样与反走样"}],["meta",{"property":"og:description","content":"走样与反走样 对屏幕的采样后，我们得到了以下光栅化的结果，图片有严重的锯齿 ( jaggies )。 image-20220626001736439 为什么会出现锯齿以及如何抗锯齿是本节要介绍的内容。 走样 ( Aliasing ) 采样在图形学中是广泛存在的。采样出现问题时会产生 Sampling Artifacts，意为一切不准确或不希望看到的结果..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/e6c9d24egy1h3mttct15vj211q0j2q51.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"走样与反走样\\",\\"image\\":[\\"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/e6c9d24egy1h3mttct15vj211q0j2q51.jpg\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"走样 ( Aliasing )","slug":"走样-aliasing","link":"#走样-aliasing","children":[]},{"level":2,"title":"频域 ( frequency domain )","slug":"频域-frequency-domain","link":"#频域-frequency-domain","children":[]},{"level":2,"title":"反走样 ( Antialiasing )","slug":"反走样-antialiasing","link":"#反走样-antialiasing","children":[{"level":3,"title":"滤波","slug":"滤波","link":"#滤波","children":[]},{"level":3,"title":"其他类型抗锯齿","slug":"其他类型抗锯齿","link":"#其他类型抗锯齿","children":[]}]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":3.31,"words":993},"filePathRelative":"图形学/games101/2.1走样与反走样.md","localizedDate":"2024年4月12日","autoDesc":true}');export{g as comp,h as data};
