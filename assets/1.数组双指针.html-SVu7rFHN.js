import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as p}from"./app-BzW9chhs.js";const t={},o=p(`<h1 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h1><p>在处理数组和链表相关问题时，双指针是常用的技巧。</p><p>双指针有两类：左右指针、快慢指针。左右指针是两个指针<strong>相向或相背而行</strong>，快慢指针是<strong>同向而行，一快一慢</strong>。</p><h2 id="快慢指针" tabindex="-1"><a class="header-anchor" href="#快慢指针"><span>快慢指针</span></a></h2><h3 id="删除有序数组的重复项-26" tabindex="-1"><a class="header-anchor" href="#删除有序数组的重复项-26"><span>删除有序数组的重复项 ( 26 )</span></a></h3><p>有序数组中的重复元素是连在一起的。</p><p>定义 slow 指针，保证 [0, slow] 没有重复元素；fast 指针在前面探路，遇到重复元素则跳过，不重复元素则加入 [0, slow]。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">removeDupl</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> slow <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// [0, slow] 都是不重复的</span>
  <span class="token keyword">let</span> fast <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// fast 指针探路，寻找不重复元素</span>
  
  <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">!==</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      slow<span class="token operator">++</span>
      nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    fast<span class="token operator">++</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> slow <span class="token operator">+</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="删除有序链表的重复项-83" tabindex="-1"><a class="header-anchor" href="#删除有序链表的重复项-83"><span>删除有序链表的重复项 ( 83 )</span></a></h3><p>如果 nums 是一个链表，算法是一样的，区别在于数组操作变成指针操作。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">removeDupl</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> slow <span class="token operator">=</span> head<span class="token punctuation">,</span> fast <span class="token operator">=</span> head
  <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>val <span class="token operator">!==</span> slow<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      slow<span class="token punctuation">.</span>next <span class="token operator">=</span> fast <span class="token comment">// nums[slow] = nums[fast]</span>
      slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next <span class="token comment">// slow++</span>
    <span class="token punctuation">}</span>
    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next <span class="token comment">// fast++</span>
  <span class="token punctuation">}</span>
  slow<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 断开与后面重复元素的连接</span>
  <span class="token keyword">return</span> head
<span class="token punctuation">}</span>
</code></pre></div><h3 id="移除元素-27" tabindex="-1"><a class="header-anchor" href="#移除元素-27"><span>移除元素 ( 27 )</span></a></h3><p>移除数组中等于目标值的所有元素。</p><p>这相当于筛选出不等于 target 的所有元素，当 fast 指针遇到不等于 target 的值，就加入 [0, slow] 中，其余的不需要管。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fast <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>
      slow<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    fast<span class="token operator">++</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> slow
<span class="token punctuation">}</span>
</code></pre></div><p>注意这里是先复赋值再 <code>slow++</code>，说明 [0, slow - 1] 才是不包含目标元素的，因此最后返回的数组长度是 slow 而不是 slow + 1。</p><h3 id="移动零-283" tabindex="-1"><a class="header-anchor" href="#移动零-283"><span>移动零 ( 283 )</span></a></h3><p>要将数组中的 0 元素移动到数组末尾，这相当于先将不为 0 的元素筛选出来，然后在后面补 0。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">moveZeros</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// [0, p - 1] 是不含 0 的</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    nums<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>整体来看，这几个题目都是 fast 指针寻找目标元素 ( 比如值不为 target，不为 0 等 )，然后 slow 对 nums 从左到右进行覆写，保证 [0, slow] 都是需要的元素。</p><p>另外，快慢指针在判断链表是否成环问题非常有用，具体链表章节介绍。</p><h2 id="左右指针" tabindex="-1"><a class="header-anchor" href="#左右指针"><span>左右指针</span></a></h2><h3 id="二分查找" tabindex="-1"><a class="header-anchor" href="#二分查找"><span>二分查找</span></a></h3><p>二分查找的思想就是用左右指针的中点将数组分成两份，如果数组中点大于目标值，则检查左边，否则检查右边。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> mid
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre></div><p>二分查找有些细节需要注意，具体二分查找一节介绍。</p><h3 id="有序数组的两数之和-167" tabindex="-1"><a class="header-anchor" href="#有序数组的两数之和-167"><span>有序数组的两数之和 ( 167 )</span></a></h3><p>找出有序数组中和为 target 值的两个数，返回它们的下标。</p><p>用左右指针解决这个问题很简单，左右指针分别置于数组两端，如果它们的和大于目标值，则移动右指针，否则移动左指针。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      left<span class="token operator">++</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      right<span class="token operator">--</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>其实 nSum 问题也是有规律的，具体 nSum 问题一节介绍。</p><h3 id="最长回文子串-5" tabindex="-1"><a class="header-anchor" href="#最长回文子串-5"><span>最长回文子串 ( 5 )</span></a></h3><p>一般的回文串问题只需要判断左右指针位置的元素是否相等，然后左右指针向中间靠拢就行了。</p><p>我们提升下难度：找出字符串中的最长回文子串。</p><p>一个回文串的长度可能是奇数，也可能是偶数。如果是奇数，则有一个中心字符，如果是偶数，则有两个中心字符。</p><p>我们先写一个从中心向两端扩散的寻找回文串的函数。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 返回以 l，r 为中心的最长回文串</span>
<span class="token keyword">function</span> <span class="token function">palindrome</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    l<span class="token operator">--</span>
    r<span class="token operator">++</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果 l = r，相当于寻找长度为奇数的回文串，如果输入相邻的 l 和 r，相当于寻找长度为偶数的回文串。解决最长回文子串的思路：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// 找到以 s[i] 为中心的回文串</span>
 <span class="token comment">// 找到以 s[i] 和 s[i+1] 为中心的回文串</span>
 <span class="token comment">// 更新最大值</span>
<span class="token punctuation">}</span>
</code></pre></div><p>具体代码：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>  
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">palindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">palindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    
    <span class="token comment">// 找出 res、s1、s2 中最长的</span>
    res <span class="token operator">=</span> s1<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> res<span class="token punctuation">.</span>length <span class="token operator">?</span> s1 <span class="token operator">:</span> res
    res <span class="token operator">=</span> s2<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> res<span class="token punctuation">.</span>length <span class="token operator">?</span> s2 <span class="token operator">:</span> res
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre></div><p>特别的是，左右指针一般都是两端向中间靠拢，而回文子串则是中心向两端扩散。</p><p>这种情况只有回文串问题会遇到。</p>`,44),e=[o];function c(l,u){return s(),a("div",null,e)}const i=n(t,[["render",c],["__file","1.数组双指针.html.vue"]]),d=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/leetcode/1.%E6%95%B0%E7%BB%84%E5%8F%8C%E6%8C%87%E9%92%88.html","title":"数组","lang":"zh-CN","frontmatter":{"description":"数组 在处理数组和链表相关问题时，双指针是常用的技巧。 双指针有两类：左右指针、快慢指针。左右指针是两个指针相向或相背而行，快慢指针是同向而行，一快一慢。 快慢指针 删除有序数组的重复项 ( 26 ) 有序数组中的重复元素是连在一起的。 定义 slow 指针，保证 [0, slow] 没有重复元素；fast 指针在前面探路，遇到重复元素则跳过，不重复元...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E7%BC%96%E7%A8%8B/leetcode/1.%E6%95%B0%E7%BB%84%E5%8F%8C%E6%8C%87%E9%92%88.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"数组"}],["meta",{"property":"og:description","content":"数组 在处理数组和链表相关问题时，双指针是常用的技巧。 双指针有两类：左右指针、快慢指针。左右指针是两个指针相向或相背而行，快慢指针是同向而行，一快一慢。 快慢指针 删除有序数组的重复项 ( 26 ) 有序数组中的重复元素是连在一起的。 定义 slow 指针，保证 [0, slow] 没有重复元素；fast 指针在前面探路，遇到重复元素则跳过，不重复元..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数组\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"快慢指针","slug":"快慢指针","link":"#快慢指针","children":[{"level":3,"title":"删除有序数组的重复项 ( 26 )","slug":"删除有序数组的重复项-26","link":"#删除有序数组的重复项-26","children":[]},{"level":3,"title":"删除有序链表的重复项 ( 83 )","slug":"删除有序链表的重复项-83","link":"#删除有序链表的重复项-83","children":[]},{"level":3,"title":"移除元素 ( 27 )","slug":"移除元素-27","link":"#移除元素-27","children":[]},{"level":3,"title":"移动零 ( 283 )","slug":"移动零-283","link":"#移动零-283","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"左右指针","slug":"左右指针","link":"#左右指针","children":[{"level":3,"title":"二分查找","slug":"二分查找","link":"#二分查找","children":[]},{"level":3,"title":"有序数组的两数之和 ( 167 )","slug":"有序数组的两数之和-167","link":"#有序数组的两数之和-167","children":[]},{"level":3,"title":"最长回文子串 ( 5 )","slug":"最长回文子串-5","link":"#最长回文子串-5","children":[]}]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":3.97,"words":1190},"filePathRelative":"编程/leetcode/1.数组双指针.md","localizedDate":"2024年4月12日","autoDesc":true}');export{i as comp,d as data};
