import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,b as t}from"./app-BzW9chhs.js";const p={},o=t(`<h1 id="组合模式" tabindex="-1"><a class="header-anchor" href="#组合模式"><span>组合模式</span></a></h1><p>组合模式将对象组合成树形结构，以表示“部分—整体”的层次结构。</p><p>使用组合对象通常会的得到一棵树，宏命令就是组合模式的应用。</p><h2 id="从宏命令理解组合模式" tabindex="-1"><a class="header-anchor" href="#从宏命令理解组合模式"><span>从宏命令理解组合模式</span></a></h2><p>回顾命令模式中的宏命令。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> closeDoorCommand <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;关门&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> openPcCommand <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开电脑&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> openQQCommand <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;登录QQ&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createMacroCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> commandList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">command</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      commandList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      commandList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">command</span> <span class="token operator">=&gt;</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> macroCommand <span class="token operator">=</span> <span class="token function">createMacroCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
macroCommand
  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>closeDoorCommand<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>openPcCommand<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>openQQCommand<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>宏命令对象本身是一个命令，它包含了一组子命令对象。最重要的是，它们都具有 execute 方法。</p><p>marcoCommand 被称为<strong>组合对象</strong>，其余都是<strong>叶对象</strong>。</p><p>macroCommand 的 execute 方法<strong>不执行真正的操作，而是把 execute 请求委托叶对象</strong>。</p><p>不仅如此， 宏命令还可以添加另一个宏命令，如此不停添加，宏命令和命令对象就组成了一棵树，只需调用树的根节点的 execute 方法，就可以逐级向下传递，调用所有命令的 execute 方法。</p><h2 id="扫描文件夹" tabindex="-1"><a class="header-anchor" href="#扫描文件夹"><span>扫描文件夹</span></a></h2><p>文件夹和文件之间的关系，非常适合用组合模式来描述。文件夹里既可以包含文件，又可以包含其他文件夹，最终可能组合成一棵树。</p><p>我们先写一个函数用于创建文件夹，文件夹可以添加文件，并可以扫描文件夹下的文件。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createFolder</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">,</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      files<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>文件不能再添加文件。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createFile</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">,</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;文件下不能添加文件&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;找到文件&#39;</span>， name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>假设现有文件目录结构如下。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> folder <span class="token operator">=</span> <span class="token function">createFolder</span><span class="token punctuation">(</span><span class="token string">&#39;学习资料&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> folder1 <span class="token operator">=</span> <span class="token function">createFolder</span><span class="token punctuation">(</span><span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> folder2 <span class="token operator">=</span> <span class="token function">createFolder</span> <span class="token punctuation">(</span><span class="token string">&#39;jQuery&#39;</span><span class="token punctuation">)</span>

folder1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">createFile</span><span class="token punctuation">(</span><span class="token string">&#39;JavaScript 设计模式与开发实践&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
folder2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">createFile</span><span class="token punctuation">(</span><span class="token string">&#39;精通 jQuery&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

folder<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>folder1<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>folder2<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">createFile</span><span class="token punctuation">(</span><span class="token string">&#39;重构与模式&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>我们需要在文件夹下添加新的文件。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> folder3 <span class="token operator">=</span> <span class="token function">createFolder</span><span class="token punctuation">(</span> <span class="token string">&#39;Nodejs&#39;</span><span class="token punctuation">)</span>
folder3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">createFile</span><span class="token punctuation">(</span><span class="token string">&#39;深入浅出 Node.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token function">createFile</span><span class="token punctuation">(</span><span class="token string">&#39;JavaScript 语言精髓与编程实践&#39;</span><span class="token punctuation">)</span>

folder<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>folder3<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
</code></pre></div><p>现在我们需要找到这个文件夹下的所有文件，只需调用根文件夹的 scan 方法。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>folder<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>scan 方法会将请求在这棵树中向下传递，访问所有节点。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>宏命令和扫描文件这两个例子是组合模式的经典应用。</p><p>组合模式的特点：组合对象和叶对象<strong>具有相同接口</strong>，比如宏命令与命令的 execute 方法、文件夹与文件的 scan 方法。</p><p>组合模式的作用：将对组合对象的<strong>请求传递给叶节点</strong>，从而通过根节点访问整棵树的所有叶节点。</p><p>注意组合模式和代理模式的区别。</p><ul><li><p>组合对象不执行真正的操作，它的目的在于传递请求给叶对象，而不是控制对叶对象的访问。</p></li><li><p>代理在传递请求之前会做些额外工作，或直接拒绝这个请求。</p></li></ul><p>一些需要注意的地方：</p><ul><li><p>组合模式不是父子关系</p><p>组合模式的树型结构容易让人误以为组合对象和叶对象是父子关系，这是不正确的。</p><p>组合模式是 HAS-A ( 聚合 ) 的关系，而不是 IS-A。组合对象把请求委托给叶对象，它们能够合作的关键是<strong>拥有相同的接口</strong>。</p><p>所以，组件和子组件更新的例子不是组合模式，它们是父子关系。</p></li><li><p>用职责链模式提高组合模式性能</p><p>在组合模式中，如果树的结构比较复杂，借助职责链模式可以避免遍历整棵树。</p></li></ul>`,32),c=[o];function e(u,l){return a(),s("div",null,c)}const r=n(p,[["render",e],["__file","7.组合模式.html.vue"]]),d=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.html","title":"组合模式","lang":"zh-CN","frontmatter":{"description":"组合模式 组合模式将对象组合成树形结构，以表示“部分—整体”的层次结构。 使用组合对象通常会的得到一棵树，宏命令就是组合模式的应用。 从宏命令理解组合模式 回顾命令模式中的宏命令。 宏命令对象本身是一个命令，它包含了一组子命令对象。最重要的是，它们都具有 execute 方法。 marcoCommand 被称为组合对象，其余都是叶对象。 macroCo...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7.%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"组合模式"}],["meta",{"property":"og:description","content":"组合模式 组合模式将对象组合成树形结构，以表示“部分—整体”的层次结构。 使用组合对象通常会的得到一棵树，宏命令就是组合模式的应用。 从宏命令理解组合模式 回顾命令模式中的宏命令。 宏命令对象本身是一个命令，它包含了一组子命令对象。最重要的是，它们都具有 execute 方法。 marcoCommand 被称为组合对象，其余都是叶对象。 macroCo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组合模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"从宏命令理解组合模式","slug":"从宏命令理解组合模式","link":"#从宏命令理解组合模式","children":[]},{"level":2,"title":"扫描文件夹","slug":"扫描文件夹","link":"#扫描文件夹","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":3.11,"words":933},"filePathRelative":"编程/设计模式/7.组合模式.md","localizedDate":"2024年4月12日","autoDesc":true}');export{r as comp,d as data};
