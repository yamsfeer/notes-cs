import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as t,b as n}from"./app-BzW9chhs.js";const r={},l=n('<h1 id="cuda-性能优化" tabindex="-1"><a class="header-anchor" href="#cuda-性能优化"><span>CUDA 性能优化</span></a></h1><h2 id="高效公式" tabindex="-1"><a class="header-anchor" href="#高效公式"><span>高效公式</span></a></h2><p>计算强度 = 数学计算量 / 每个线程的内存</p><ol><li>从计算量：最大化每个线程的计算量</li><li>从内存：最小化每个线程的内存读取速度</li></ol><h2 id="为-kernal-分配线程" tabindex="-1"><a class="header-anchor" href="#为-kernal-分配线程"><span>为 kernal 分配线程</span></a></h2><p>控制每个 compute shader 分配多少线程去计算。</p><h2 id="内存管理和使用" tabindex="-1"><a class="header-anchor" href="#内存管理和使用"><span>内存管理和使用</span></a></h2><h3 id="本地变量" tabindex="-1"><a class="header-anchor" href="#本地变量"><span>本地变量</span></a></h3><h3 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量"><span>全局变量</span></a></h3><h3 id="共享内存" tabindex="-1"><a class="header-anchor" href="#共享内存"><span>共享内存</span></a></h3><p>线程同步的问题</p>',11),i=[l];function o(s,c){return a(),t("div",null,i)}const p=e(r,[["render",o],["__file","3.3.性能优化.html.vue"]]),m=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/3.3.%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html","title":"CUDA 性能优化","lang":"zh-CN","frontmatter":{"description":"CUDA 性能优化 高效公式 计算强度 = 数学计算量 / 每个线程的内存 从计算量：最大化每个线程的计算量 从内存：最小化每个线程的内存读取速度 为 kernal 分配线程 控制每个 compute shader 分配多少线程去计算。 内存管理和使用 本地变量 全局变量 共享内存 线程同步的问题","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E7%BC%96%E7%A8%8B/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/3.3.%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"CUDA 性能优化"}],["meta",{"property":"og:description","content":"CUDA 性能优化 高效公式 计算强度 = 数学计算量 / 每个线程的内存 从计算量：最大化每个线程的计算量 从内存：最小化每个线程的内存读取速度 为 kernal 分配线程 控制每个 compute shader 分配多少线程去计算。 内存管理和使用 本地变量 全局变量 共享内存 线程同步的问题"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CUDA 性能优化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"高效公式","slug":"高效公式","link":"#高效公式","children":[]},{"level":2,"title":"为 kernal 分配线程","slug":"为-kernal-分配线程","link":"#为-kernal-分配线程","children":[]},{"level":2,"title":"内存管理和使用","slug":"内存管理和使用","link":"#内存管理和使用","children":[{"level":3,"title":"本地变量","slug":"本地变量","link":"#本地变量","children":[]},{"level":3,"title":"全局变量","slug":"全局变量","link":"#全局变量","children":[]},{"level":3,"title":"共享内存","slug":"共享内存","link":"#共享内存","children":[]}]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":0.36,"words":107},"filePathRelative":"编程/并行计算/3.3.性能优化.md","localizedDate":"2024年4月12日","autoDesc":true}');export{p as comp,m as data};
