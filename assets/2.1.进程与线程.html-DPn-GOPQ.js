import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,b as t}from"./app-BzW9chhs.js";const e={},p=t(`<h1 id="进程与线程" tabindex="-1"><a class="header-anchor" href="#进程与线程"><span>进程与线程</span></a></h1><p>任务切换和调度是操作系统的核心。</p><p>之所以要进入进程，是为了更好的管理和使用 CPU。</p><h2 id="pcb" tabindex="-1"><a class="header-anchor" href="#pcb"><span>PCB</span></a></h2><p>为了让 CPU 在多个进程间切换时，能恢复程序执行的状态，需要一个 PCB 记录程序运行状态。</p><p>具体来说，PCB 记录了 寄存器中的值。</p><p>PCB + 状态 + 队列</p><p>队列</p><ul><li>就绪队列</li><li>磁盘等待队列</li></ul><p>状态</p><ul><li>新建态</li><li>就绪态</li><li>运行态</li><li>阻塞态</li><li>终止态</li></ul><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>curProcess<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">WAIT</span> <span class="token comment">// 当前进程进入磁盘等待队列</span>
<span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//进程调度</span>

<span class="token keyword">function</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  newProcess <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>ReadyQueue<span class="token punctuation">)</span> <span class="token comment">// 在就绪队列中取出一个进程，这里有复杂的进程调度算法</span>
  <span class="token function">switchTo</span><span class="token punctuation">(</span>curProcess<span class="token punctuation">,</span> newProcess<span class="token punctuation">)</span> <span class="token comment">// 进程切换</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="进程调度算法" tabindex="-1"><a class="header-anchor" href="#进程调度算法"><span>进程调度算法</span></a></h2><ul><li>FIFO 先到先服务 <ul><li>重要任务无法处理</li></ul></li><li>Priority 按优先级 <ul><li>进程饥饿</li></ul></li></ul><h2 id="进程切换" tabindex="-1"><a class="header-anchor" href="#进程切换"><span>进程切换</span></a></h2><p>相当于上下文切换。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">switchTo</span><span class="token punctuation">(</span><span class="token parameter">pCur<span class="token punctuation">,</span> pNew</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  pCur<span class="token punctuation">.</span>ax <span class="token operator">=</span> <span class="token constant">CPU</span><span class="token punctuation">.</span>ax
  pCur<span class="token punctuation">.</span>bx <span class="token operator">=</span> <span class="token constant">CPU</span><span class="token punctuation">.</span>bx
  <span class="token comment">// ...</span>
  pCur<span class="token punctuation">.</span>cs <span class="token operator">=</span> <span class="token constant">CPU</span><span class="token punctuation">.</span>cs
  pCur<span class="token punctuation">.</span>retpc <span class="token operator">=</span> <span class="token constant">CPU</span><span class="token punctuation">.</span>pc
  
  <span class="token constant">CPU</span><span class="token punctuation">.</span>ax <span class="token operator">=</span> pNew<span class="token punctuation">.</span>ax
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="进程间合作" tabindex="-1"><a class="header-anchor" href="#进程间合作"><span>进程间合作</span></a></h2><h3 id="进程同步" tabindex="-1"><a class="header-anchor" href="#进程同步"><span>进程同步</span></a></h3><h3 id="锁" tabindex="-1"><a class="header-anchor" href="#锁"><span>锁</span></a></h3><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>PCB 是数据结构，调度是算法，进程切换相当于上下文切换。</p>`,22),o=[p];function c(l,i){return a(),s("div",null,o)}const d=n(e,[["render",c],["__file","2.1.进程与线程.html.vue"]]),h=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.1.%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B.html","title":"进程与线程","lang":"zh-CN","frontmatter":{"description":"进程与线程 任务切换和调度是操作系统的核心。 之所以要进入进程，是为了更好的管理和使用 CPU。 PCB 为了让 CPU 在多个进程间切换时，能恢复程序执行的状态，需要一个 PCB 记录程序运行状态。 具体来说，PCB 记录了 寄存器中的值。 PCB + 状态 + 队列 队列 就绪队列 磁盘等待队列 状态 新建态 就绪态 运行态 阻塞态 终止态 进程调...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.1.%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"进程与线程"}],["meta",{"property":"og:description","content":"进程与线程 任务切换和调度是操作系统的核心。 之所以要进入进程，是为了更好的管理和使用 CPU。 PCB 为了让 CPU 在多个进程间切换时，能恢复程序执行的状态，需要一个 PCB 记录程序运行状态。 具体来说，PCB 记录了 寄存器中的值。 PCB + 状态 + 队列 队列 就绪队列 磁盘等待队列 状态 新建态 就绪态 运行态 阻塞态 终止态 进程调..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"进程与线程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"PCB","slug":"pcb","link":"#pcb","children":[]},{"level":2,"title":"进程调度算法","slug":"进程调度算法","link":"#进程调度算法","children":[]},{"level":2,"title":"进程切换","slug":"进程切换","link":"#进程切换","children":[]},{"level":2,"title":"进程间合作","slug":"进程间合作","link":"#进程间合作","children":[{"level":3,"title":"进程同步","slug":"进程同步","link":"#进程同步","children":[]},{"level":3,"title":"锁","slug":"锁","link":"#锁","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":0.93,"words":280},"filePathRelative":"计算机基础/操作系统/2.1.进程与线程.md","localizedDate":"2024年4月12日","autoDesc":true}');export{d as comp,h as data};
