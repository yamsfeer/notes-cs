import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as e,c,a,d as n,e as u,b as s}from"./app-BzW9chhs.js";const l={},r=s(`<h1 id="迭代器模式" tabindex="-1"><a class="header-anchor" href="#迭代器模式"><span>迭代器模式</span></a></h1><p>迭代器模式是指：提供一种方法，顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。</p><p>JavaScript 中数组的 forEach 函数就是迭代器。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment">// 1,2,3</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>如果要实现自己的迭代器，以 forEach 为例：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">forEach</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token keyword">this</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>上面是迭代器的一个例子，简单来说，迭代器就是遍历的方法。</p><p>迭代器可以分为内部迭代器和外部迭代器，它们有各自的适用场景。</p><h2 id="内部迭代器" tabindex="-1"><a class="header-anchor" href="#内部迭代器"><span>内部迭代器</span></a></h2><p>forEach 函数就属于内部迭代器。函数内部已经定义好了迭代规则，它完全接手整个迭代过程，外部只需要一次调用。</p><p>内部迭代器的缺点在于：迭代规则已经规定好，要想完成其他控制只能修改代码。比如 forEach 函数无法做到倒序遍历。</p><h2 id="外部迭代器" tabindex="-1"><a class="header-anchor" href="#外部迭代器"><span>外部迭代器</span></a></h2><p>外部迭代器的特点是：可以手工控制迭代的过程或者顺序。</p><p>下面我们来实现一个外部迭代器，他可以用于迭代一个数组。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Iterator</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> current <span class="token operator">+=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> current <span class="token operator">&gt;=</span> arr<span class="token punctuation">.</span>length <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> arr<span class="token punctuation">[</span>current<span class="token punctuation">]</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>使用这个外部迭代器来判断两个数组是否元素相同。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">it1<span class="token punctuation">,</span> it2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>it1<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>it2<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>it1<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> it2<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token comment">// 不相等</span>
    <span class="token punctuation">}</span>
    it1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    it2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> it1 <span class="token operator">=</span> <span class="token function">Iterator</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> it2 <span class="token operator">=</span> <span class="token function">Iterator</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token function">compare</span><span class="token punctuation">(</span>it1<span class="token punctuation">,</span> it2<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre></div><h2 id="es6-的-iterator" tabindex="-1"><a class="header-anchor" href="#es6-的-iterator"><span>ES6 的 Iterator</span></a></h2><p>在 JavaScript 中，迭代器是一个对象，一个迭代对象属性的迭代器实现如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span> <span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> values <span class="token operator">=</span> Object<span class="token punctuation">.</span>values<span class="token punctuation">[</span>obj<span class="token punctuation">]</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">=</span> values<span class="token punctuation">.</span>length
  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token comment">// 迭代器对象</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">done</span><span class="token operator">:</span> i<span class="token operator">++</span> <span class="token operator">&gt;=</span> length
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> it <span class="token operator">=</span> <span class="token function">iterator</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  res <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>实现了 <code>Symbol.iterator</code> 函数的对象都可以使用 <code>for-of</code> 循环，其实 <code>for-of</code> 循环就是帮我们不断调用 <code>next</code> 函数直至 <code>done: true</code>。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>obj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> iterator

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">// 1,2</span>
<span class="token punctuation">}</span>
</code></pre></div>`,22),i={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators",target:"_blank",rel:"noopener noreferrer"},k=s(`<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>迭代器分为内部迭代器、外部迭代器。</p><p>内部迭代器完全接手整个迭代过程，只需一次调用，外部迭代器则是将迭代的控制权交出，由外部控制迭代时机，因此需要不断调用 next 函数。</p><p>ES6 的迭代器接口函数需要返回一个迭代器对象，迭代器对象具有 next 方法，且 next 方法返回两个属性：value 和 done。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>obj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        value<span class="token punctuation">,</span> done
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>实现了迭代器接口的对象可以使用 <code>for-of</code> 等内置的语句进行迭代操作。</p>`,6);function d(m,f){const t=o("ExternalLinkIcon");return e(),c("div",null,[r,a("p",null,[n("ES6 迭代器相关的内容参考："),a("a",i,[n("迭代器和生成器"),u(t)]),n("。")]),k])}const g=p(l,[["render",d],["__file","4.迭代器模式.html.vue"]]),v=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4.%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.html","title":"迭代器模式","lang":"zh-CN","frontmatter":{"description":"迭代器模式 迭代器模式是指：提供一种方法，顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。 JavaScript 中数组的 forEach 函数就是迭代器。 如果要实现自己的迭代器，以 forEach 为例： 上面是迭代器的一个例子，简单来说，迭代器就是遍历的方法。 迭代器可以分为内部迭代器和外部迭代器，它们有各自的适用场景。 内部迭...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4.%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"迭代器模式"}],["meta",{"property":"og:description","content":"迭代器模式 迭代器模式是指：提供一种方法，顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。 JavaScript 中数组的 forEach 函数就是迭代器。 如果要实现自己的迭代器，以 forEach 为例： 上面是迭代器的一个例子，简单来说，迭代器就是遍历的方法。 迭代器可以分为内部迭代器和外部迭代器，它们有各自的适用场景。 内部迭..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"迭代器模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"内部迭代器","slug":"内部迭代器","link":"#内部迭代器","children":[]},{"level":2,"title":"外部迭代器","slug":"外部迭代器","link":"#外部迭代器","children":[]},{"level":2,"title":"ES6 的 Iterator","slug":"es6-的-iterator","link":"#es6-的-iterator","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":2.33,"words":698},"filePathRelative":"编程/设计模式/4.迭代器模式.md","localizedDate":"2024年4月12日","autoDesc":true}');export{g as comp,v as data};
