import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,d as s,e as t,b as p}from"./app-BzW9chhs.js";const u={},i=n("h1",{id:"promise",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#promise"},[n("span",null,"Promise")])],-1),r={href:"https://promisesaplus.com/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.ituring.com.cn/article/66566",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/yamsfeer/toy-promise",target:"_blank",rel:"noopener noreferrer"},m=p('<h2 id="宏任务微任务" tabindex="-1"><a class="header-anchor" href="#宏任务微任务"><span>宏任务微任务</span></a></h2><p>JavaScript 是单线程的，为了解决阻塞问题，JavaScript 有两种任务执行模式：同步模式 ( Synchronous ) 和异步模式 ( Asynchronous )。</p><p>异步模式有宏任务和微任务两种。</p><ul><li>宏任务 ( Macrotask ) 称为 Task，由宿主 ( 浏览器、Node ) 发起</li><li>微任务 ( Microtask ) 称为 Job，由 JS 自身发起。</li></ul><p>创建宏任务和微任务的方式：</p><table><thead><tr><th>宏任务 ( Macrotask )</th><th>微任务 ( Microtask )</th></tr></thead><tbody><tr><td>setTimeout</td><td>requestAnimationFrame ( 有争议 )</td></tr><tr><td>setInterval</td><td>MutationObserver ( 浏览器环境 )</td></tr><tr><td>MessageChannel</td><td>Promise.[then/catch/finally]</td></tr><tr><td>I/O，事件队列</td><td>process.nextTick ( Node 环境 )</td></tr><tr><td>setImmediate ( Node 环境 )</td><td>queueMicrotask</td></tr><tr><td>script ( 代码块 )</td><td></td></tr></tbody></table>',6),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide",target:"_blank",rel:"noopener noreferrer"},f=p(`<h2 id="基本代码" tabindex="-1"><a class="header-anchor" href="#基本代码"><span>基本代码</span></a></h2><p>根据 promise 的规范，我们总结以下几点：</p><blockquote><ol><li>Promise 是一个类，new Promise 时需要传入一个执行函数，执行函数会立即执行</li><li>Promise 有三种状态</li></ol><ul><li>Pending 等待</li><li>Fulfilled 完成</li><li>Rejected 失败</li></ul><ol start="3"><li>状态只能由 Pending 转为 Fulfilled 或 Pending 转为 Rejected，且只能改变一次</li><li>Promise 中使用 resolve 和 reject 函数来更改状态，这两个函数会传入执行函数</li><li>then 方法会判断状态</li></ol><ul><li>如果状态是 Fulfilled，调用成功回调函数</li><li>如果状态是 Rejected，调用失败回调函数</li></ul></blockquote><p>先写一些基本代码，声明状态、resolve、reject 函数等。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;pending&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;fulfilled&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;rejected&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">TPromise</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// resolve、reject 函数传入执行器，使其能调用改变状态</span>
    <span class="token function">executor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  state <span class="token operator">=</span> <span class="token constant">PENDING</span> <span class="token comment">// 当前状态</span>
  value <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// fulfill 的值</span>
  reason <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// reject 的原因</span>
  
  <span class="token comment">// 存储状态改变的回调函数</span>
  filfillCbs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  rejectCbs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token comment">// 用箭头函数绑定上下文，使其指向 promise</span>
  <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  
  <span class="token comment">// 最重要的 then 函数</span>
  <span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="resolve、reject-改变状态" tabindex="-1"><a class="header-anchor" href="#resolve、reject-改变状态"><span>resolve、reject 改变状态</span></a></h2><p>resolve、reject 可以改变 promise 的状态，且只能改变一次。</p><p>then 函数会将 fulfill 或 reject 的回调函数存起来，当 promise 状态变化时，需要调用相应的回调函数。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">TPromise</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">FULFILLED</span> <span class="token comment">// 改变状态</span>
    
    <span class="token comment">// 清空 fulfill callback</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fulfillCbs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>fulfillCbs<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">REJECTED</span> <span class="token comment">// 改变状态</span>
    
    <span class="token comment">// 清空 reject callback</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rejectCbs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCbs<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="then-函数" tabindex="-1"><a class="header-anchor" href="#then-函数"><span>then 函数</span></a></h2><p>then 函数的实现比较复杂，我们一步一步来实现。</p><h3 id="存储回调函数" tabindex="-1"><a class="header-anchor" href="#存储回调函数"><span>存储回调函数</span></a></h3><p>promise 每次调用 then 函数 ( 非链式调用 ) ，相当于指定相应的回调函数。</p><p>如果当前 promise 已经 resolve，则直接调用；如果是 PENDING 状态，则存入数组中，当状态改变时清空回调数组。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">TPromise</span> <span class="token punctuation">{</span>
  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfill<span class="token punctuation">,</span> onReject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">onFulfill</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">onReject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>fulfillCbs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onFulfill<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCbs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onReject<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="then-链式调用" tabindex="-1"><a class="header-anchor" href="#then-链式调用"><span>then 链式调用</span></a></h3><p>每当 promise 调用 then 函数，需要创建并返回一个新的 promise，以此实现链式调用。</p><p>如果 onFulfill 或 onReject 处理函数的返回值是一个 promise，则需要等这个 promise resolve。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">TPromise</span> <span class="token punctuation">{</span>
  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfill<span class="token punctuation">,</span> onReject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">onFulfill</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
        <span class="token function">resolvePromise</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">onReject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
        <span class="token function">resolvePromise</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fulfillCbs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onFulfill<span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCbs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onReject<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> promise2 <span class="token comment">// then 函数返回新的 promise</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="resolvepromise" tabindex="-1"><a class="header-anchor" href="#resolvepromise"><span>resolvePromise</span></a></h3><p>resolvePromise 中判断返回值是否为新 promise 或 thenable 对象，如果是则等待这个 promise resolve。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">resolvePromise</span><span class="token punctuation">(</span><span class="token parameter">userReturn<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  userReturn <span class="token keyword">instanceof</span> <span class="token class-name">TPromise</span> <span class="token operator">||</span> <span class="token function">isThenable</span><span class="token punctuation">(</span>userReturn<span class="token punctuation">)</span>
    <span class="token operator">?</span> userReturn<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token comment">// then 函数返回 promise，需要等其 resolve</span>
    <span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>userReturn<span class="token punctuation">)</span> <span class="token comment">// 普通值</span>
<span class="token punctuation">}</span>
</code></pre></div><p><em>注意这里的 resolve 和 reject 是 then 函数创建的 promise 的 resolve 和 reject。</em></p><p>isThenable 实现：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isThenable</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    p <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
    <span class="token punctuation">(</span><span class="token keyword">typeof</span> p <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> p <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    <span class="token keyword">typeof</span> p<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="queuemicrotask" tabindex="-1"><a class="header-anchor" href="#queuemicrotask"><span>queueMicrotask</span></a></h3><p>按照规范，promise 创建的是微任务，我们用 <code>queueMicrotask</code> 来模拟。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">TPromise</span> <span class="token punctuation">{</span>
  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfill<span class="token punctuation">,</span> onReject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token function-variable function">fulfilledMicrotask</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">onFulfill</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
          <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span> <span class="token function-variable function">rejectedMicrotask</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">onReject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
          <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token function">fulfilledMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token function">rejectedMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fulfillCbs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fulfilledMicrotask<span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCbs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rejectedMicrotask<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
			<span class="token keyword">return</span> promise2
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="默认处理函数" tabindex="-1"><a class="header-anchor" href="#默认处理函数"><span>默认处理函数</span></a></h3><p>promise 的回调函数可以不传，我们需要给一个默认的处理函数。</p><ul><li><p>如果 fulfill，则直接返回 value</p></li><li><p>如果 reject，则直接抛出错误</p></li></ul><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">TPromise</span> <span class="token punctuation">{</span>
  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfill<span class="token punctuation">,</span> onReject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    onFulfill <span class="token operator">=</span> <span class="token keyword">typeof</span> onFulfill <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
      <span class="token operator">?</span> <span class="token function-variable function">onFulfill</span>
      <span class="token operator">:</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> value
    onReject <span class="token operator">=</span> <span class="token keyword">typeof</span> onReject <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
      <span class="token operator">?</span> <span class="token function-variable function">onReject</span>
      <span class="token operator">:</span> <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> reason <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="捕获错误" tabindex="-1"><a class="header-anchor" href="#捕获错误"><span>捕获错误</span></a></h2><p>在 promise 执行过程中，如果有未捕获的错误，promise 会自动 reject。</p><p>我们用 <code>try-catch</code> 语句对主要逻辑进行错误处理，当捕获到错误则调用 reject 函数。</p><p>使用者代码中可能出现错误的地方有两个：</p><ul><li>执行器函数</li><li><code>onFulfill / onReject</code> 回调函数</li></ul><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">TPromise</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token function">executor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">const</span> <span class="token function-variable function">fulfilledMicrotask</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">onFulfill</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
          <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="es6-的-promise" tabindex="-1"><a class="header-anchor" href="#es6-的-promise"><span>ES6 的 promise</span></a></h2>`,39),v=n("code",null,"Promise.resolve",-1),y=n("code",null,"Promise.reject",-1),g={href:"https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-properties-of-the-promise-constructor",target:"_blank",rel:"noopener noreferrer"},j=p(`<h3 id="promise-resolve-promise-reject" tabindex="-1"><a class="header-anchor" href="#promise-resolve-promise-reject"><span>Promise.resolve, Promise.reject</span></a></h3><p>如果传入的是一个 promise，则直接返回这个 promise，否则，将其作为 resolve 值，用一个新的 promise 包装起来。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">TPromise</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target <span class="token keyword">instanceof</span> <span class="token class-name">TPromise</span>
      <span class="token operator">?</span> target
      <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">TPromise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>Promise.reject</code> 也类似。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">TPromise</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target <span class="token keyword">instanceof</span> <span class="token class-name">TPromise</span>
      <span class="token operator">?</span> target
      <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">TPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="all-race-any-allsettled" tabindex="-1"><a class="header-anchor" href="#all-race-any-allsettled"><span>all, race, any, allSettled</span></a></h3><p>这四个 API 是非常类似的，它们都接受一个 promise 数组 ( 准确的说是 iterable 对象 ) ，返回一个新的 promise。</p><p>把返回的 promise 称为主 promise，数组中的元素称为子 promise，可以分为以下几种情况：</p><ul><li>Promise.all <ul><li>所有子 promise fulfill ==&gt; 主 promise fulfill</li><li>任意子 promise reject ==&gt; 主 promise 立即 reject</li><li>resolve 值是一个数组，数组元素和 promise 数组的顺序相同。</li></ul></li><li>Promise.race <ul><li>任意子 promise resolve ( 无论 fulfill 还是 reject ) ==&gt; 主 promise fulfill</li></ul></li><li>Promise.any <ul><li>任意子 promise fulfill ==&gt; 主 promise fulfill</li><li>所有子 promise reject ==&gt; 主 promise reject</li></ul></li><li>Promise.allSettled <ul><li>所有子 promise resolve ( 无论 fulfill 还是 reject ) ==&gt; 主 promise fulfill</li><li>resolve 值是一个数组，数组元素结构为 <code>{ status: &#39;fulfilled&#39;, value: val }</code> 或 <code>{ status: &#39;rejected&#39;, reason: error }</code></li></ul></li></ul><p>从代码实现上来说，也是非常类似的。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> length <span class="token operator">=</span> promises<span class="token punctuation">.</span>length

    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    promises<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      TPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// 防止数组中有非 promise</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token comment">// 与传入顺序相同，与 resolve 顺序无关</span>
          count<span class="token operator">++</span>

          <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 全部 fulfill，即 resolve</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 有任何 reject，即 reject</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">race</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>promises<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    promises<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">p</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      TPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// 防止有非 promise</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
          <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 任一子 promise fulfill，即 resolve</span>
          <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token comment">// 任一子 promise reject，即 reject</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">any</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> length <span class="token operator">=</span> promises<span class="token punctuation">.</span>length

    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    promises<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      TPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
          <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> reason
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>count <span class="token operator">===</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token parameter">proimises</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TPromise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 除非本身有错误，否则不会 reject</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> length <span class="token operator">=</span> proimises<span class="token punctuation">.</span>length

    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    proimises<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token function-variable function">onFulfill</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;fulfilled&#39;</span><span class="token punctuation">,</span>
          value
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>count <span class="token operator">===</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> <span class="token function-variable function">onReject</span> <span class="token operator">=</span> <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&#39;rejected&#39;</span><span class="token punctuation">,</span>
          reason
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>count <span class="token operator">===</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      TPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onFulfill<span class="token punctuation">,</span> onReject<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>值得一提的是，四个 API 都需要判断 promise 数组的长度，如果是空数组则需要直接 resolve，否则在 forEach 函数中将不会使主 promise resolve。另外，每个数组元素都需要用 <code>TPromise.resolve(p)</code> 包装，防止传入非 promise 对象。</p><h3 id="catch" tabindex="-1"><a class="header-anchor" href="#catch"><span>catch</span></a></h3><p>catch 其实是 then(null, onReject) 的别名，用于指定发生错误时的回调。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">TPromise</span> <span class="token punctuation">{</span>
  <span class="token function">catch</span><span class="token punctuation">(</span>onReject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> onReject<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="finally" tabindex="-1"><a class="header-anchor" href="#finally"><span>finally</span></a></h3><p>不管 promise 最后状态如何都会执行</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">TPromise</span> <span class="token punctuation">{</span>
  <span class="token function">finally</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> p <span class="token operator">=</span> TPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
      <span class="token parameter">value</span> <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token parameter">error</span> <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> error <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Promise 是观察者模式</p><ul><li><p>resolve, reject 函数</p><p>将 state 转为 fulfilled 或 rejected，保存 value 或 reason，调用 then 方法保存的 callback 函数并传入 value 或 reason，callback 是用 queueMicrotask 包装的微任务</p></li><li><p>then 函数</p><p>把 onFilfill 或 onReject 处理函数包装成微任务，如果当前状态是 pending，则将微任务存入回调数组。</p><p>提供默认 onFilfill 或 onReject 处理函数，将 fulfill value 或 reject reason 直接返回或抛出。</p></li><li><p>resolvePromise</p><p>resolvePromise 判断 onFilfill 或 onReject 处理函数的返回值，如果返回值 userReturn 是新的 promise，则等待这个 promise resolve，具体就是 <code>userReturn.then(resolve, reject)</code>。</p></li><li><p>promise 的错误处理就是用 <code>try-catch</code> 语句，当捕获到错误，则调用 reject 函数。</p></li><li><p>catch 是 then(null, rejection) 的别名，用于指定发生错误时的回调</p></li><li><p>then、all、race 等方法都会返回一个新的 promise，以便实现链式调用</p></li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,25),w={href:"https://juejin.cn/post/6945319439772434469",target:"_blank",rel:"noopener noreferrer"},P={href:"https://juejin.cn/post/6994594642280857630#heading-14",target:"_blank",rel:"noopener noreferrer"},b={href:"https://segmentfault.com/a/1190000023157856",target:"_blank",rel:"noopener noreferrer"};function x(_,E){const a=o("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[s("为深入理解 Promise，根据 "),n("a",r,[s("Promise / A+ 规范"),t(a)]),s(" ( "),n("a",k,[s("中文版"),t(a)]),s(" ) 手写 promise ( "),n("a",d,[s("完整代码"),t(a)]),s(" )。")]),m,n("p",null,[s("由于 Promise 是创建微任务的，我们选择 "),n("a",h,[s("queueMicrotask"),t(a)]),s(" 作为模拟 Promise 创建微任务的方式。")]),f,n("p",null,[s("除了 promise/A+ 规范的内容外，ECMAScript 还提供了一些其他的 API，比如 "),v,s("、"),y,s(" 等，具体参考"),n("a",g,[s("标准文档"),t(a)]),s("。下面来实现这些内容。")]),j,n("p",null,[n("a",w,[s("深入分析 Promise 实现细节"),t(a)])]),n("p",null,[n("a",P,[s("手写promise，通俗版本"),t(a)])]),n("p",null,[n("a",b,[s("手写一个promise/A+"),t(a)])])])}const F=e(u,[["render",x],["__file","promise.html.vue"]]),M=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81/promise.html","title":"Promise","lang":"zh-CN","frontmatter":{"description":"Promise 为深入理解 Promise，根据 Promise / A+ 规范 ( 中文版 ) 手写 promise ( 完整代码 )。 宏任务微任务 JavaScript 是单线程的，为了解决阻塞问题，JavaScript 有两种任务执行模式：同步模式 ( Synchronous ) 和异步模式 ( Asynchronous )。 异步模式有宏任务...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E7%BC%96%E7%A8%8B/%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81/promise.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"Promise"}],["meta",{"property":"og:description","content":"Promise 为深入理解 Promise，根据 Promise / A+ 规范 ( 中文版 ) 手写 promise ( 完整代码 )。 宏任务微任务 JavaScript 是单线程的，为了解决阻塞问题，JavaScript 有两种任务执行模式：同步模式 ( Synchronous ) 和异步模式 ( Asynchronous )。 异步模式有宏任务..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Promise\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"宏任务微任务","slug":"宏任务微任务","link":"#宏任务微任务","children":[]},{"level":2,"title":"基本代码","slug":"基本代码","link":"#基本代码","children":[]},{"level":2,"title":"resolve、reject 改变状态","slug":"resolve、reject-改变状态","link":"#resolve、reject-改变状态","children":[]},{"level":2,"title":"then 函数","slug":"then-函数","link":"#then-函数","children":[{"level":3,"title":"存储回调函数","slug":"存储回调函数","link":"#存储回调函数","children":[]},{"level":3,"title":"then 链式调用","slug":"then-链式调用","link":"#then-链式调用","children":[]},{"level":3,"title":"resolvePromise","slug":"resolvepromise","link":"#resolvepromise","children":[]},{"level":3,"title":"queueMicrotask","slug":"queuemicrotask","link":"#queuemicrotask","children":[]},{"level":3,"title":"默认处理函数","slug":"默认处理函数","link":"#默认处理函数","children":[]}]},{"level":2,"title":"捕获错误","slug":"捕获错误","link":"#捕获错误","children":[]},{"level":2,"title":"ES6 的 promise","slug":"es6-的-promise","link":"#es6-的-promise","children":[{"level":3,"title":"Promise.resolve, Promise.reject","slug":"promise-resolve-promise-reject","link":"#promise-resolve-promise-reject","children":[]},{"level":3,"title":"all, race, any, allSettled","slug":"all-race-any-allsettled","link":"#all-race-any-allsettled","children":[]},{"level":3,"title":"catch","slug":"catch","link":"#catch","children":[]},{"level":3,"title":"finally","slug":"finally","link":"#finally","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":6.98,"words":2095},"filePathRelative":"编程/手写代码/promise.md","localizedDate":"2024年4月12日","autoDesc":true}');export{F as comp,M as data};
