import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as r,c as p,a as t,d as e,e as n,b as i}from"./app-BzW9chhs.js";const o={},c=i('<h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h1><p>编译就是把一门计算机语言翻译成另一门计算机语言的过程，最终的输出结果通常是汇编语言或另一门高级语言。</p><p>编译是由多阶段构成的流水线过程，主要包括词法分析、语法分析、语义分析、代码生成、代码优化等流程，上一阶段的输出是下一阶段的输入。</p><p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gstbtj1gozj30m104j3yw.jpg" alt=""></p><h2 id="词法分析" tabindex="-1"><a class="header-anchor" href="#词法分析"><span>词法分析</span></a></h2><p>词法分析会把<strong>字符流识别并划分为一个个有意义的词法单元，称为token</strong>。</p><p>词法分析的原理是有限状态自动机。获得这个有限状态自动机（词法分析器）有两种方法：</p><ul><li>手动编写</li><li>词法分析器生成器</li></ul>',8),g={href:"https://zh.wikipedia.org/wiki/Flex%E8%A9%9E%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},m=i('<p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gsvlz5ftrlj30m0028t8q.jpg" alt=""></p><h2 id="语法分析" tabindex="-1"><a class="header-anchor" href="#语法分析"><span>语法分析</span></a></h2><p>语法分析，或者说语法分析器的任务主要有两个：</p><ul><li>语法检查</li><li>生成抽象语法树</li></ul><p>语法检查：提供程序语言的语法规则，判断程序代码是否符合这个语法规则（语法规则是用上下文无关文法描述的）。</p><p>要判断代码是否符合语法规则，有两类算法：</p><ul><li>自顶向下分析算法 <ul><li>递归下降分析算法</li><li>LL 分析算法</li></ul></li><li>自底向上分析算法 <ul><li>LR 分析算法</li></ul></li></ul><p>其中递归下降分析算法可用于手工编写语法分析器，LL和LR分析算法用于语法分析器生成器。</p><p>LL和LR分析算法都是表驱动的：</p><ul><li><p>LL算法通过NULLABLE集、FOLLOW集、FIRST_S集构建出LL分析表</p><p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gt1qlr4018j30e605wt8t.jpg" alt=""></p></li><li><p>LR算法需要构造ACTION表和GOTO表</p><p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gtu6ak066uj60ec07it8x02.jpg" alt=""></p></li></ul><p>语法分析器生成器的作用就是根据语法规则生成分析表。</p><p><strong>抽象语法树是编译器前端和后端的接口</strong>，程序一旦被转换成抽象语法树，则源代码即被丢弃，后序阶段只处理抽象语法树。</p><p>以LR分析算法为例，生成抽象语法树就是在LR分析算法进行归约时，执行一个语义动作（通常是构造抽象语法树的节点），从叶子到根构建整棵树。</p><h2 id="语义分析" tabindex="-1"><a class="header-anchor" href="#语义分析"><span>语义分析</span></a></h2><p>语义分析也称为<strong>类型检查</strong>、<strong>上下文相关分析</strong>。</p><p>语义分析负责检查程序（<strong>抽象语法树</strong>）的<strong>上下文相关属性</strong>，<strong>检查内容与具体的源语言相关</strong>，通常包括：</p><ul><li>变量先声明后使用</li><li>表达式都有合适的类型</li><li>函数调用和函数的定义一致</li><li>...</li></ul><p>表达式类型检查、变量声明、语句处理等都需要用到符号表作查询。因此，<strong>符号表的实现是语义检查的核心数据结构</strong>。</p><p><strong>符号表是用来存储程序中变量相关信息</strong>，包括</p><ul><li>类型</li><li>作用域</li><li>访问控制信息</li><li>...</li></ul><p>高效的实现符号表，主要考虑两点：时间复杂度和空间复杂度。常见的两种符号表数据结构：</p><ul><li>使用哈希表等，查找时间复杂度为O(1)，占用空间大</li><li>使用红黑树等平衡树，查找时间复杂度为O(lg N)，节约空间</li></ul><h2 id="代码生成" tabindex="-1"><a class="header-anchor" href="#代码生成"><span>代码生成</span></a></h2><p>经过语义检查后，需要进一步将抽象语法树转化。根据现实情况，可以直接将抽象语法树转化为目标机器的汇编代码，但在现代编译器中，通常会将抽象语法树转化为各种中间表示，方便进行代码优化。</p><p>常见的中间表示有：</p><ul><li><p>树和有向无环图（<em>DAG, Directed Acyclic Graph</em>）</p><p>这是一种高层表示，适用于程序源代码</p></li><li><p>三地址码（<em>3-address code</em>）</p><p>低层表示，靠近目标机器</p></li><li><p>控制流图（<em>CFG, control-flow graph</em>）</p><p>更精细的三地址码，是程序的图状表示。适合做程序分析、程序优化等。</p></li><li><p>静态单赋值形式（<em>SSA, static single assignment form</em>）</p><p>更精细的控制流图，同时编码控制流信息和数据流信息。</p></li><li><p>连续传递风格（<em>CPS, Continuation-passing style</em>）</p><p>更一般的SSA。</p></li></ul><p>转化成这些中间表示的目的是代码优化。</p><p>换句话说，代码优化是在这些中间表示的基础上进行的，我们需要在这些中间表示上进行程序分析，根据分析结果做优化。</p><p>程序分析有：</p><ul><li>控制流分析</li><li>数据流分析 <ul><li>到达定义分析</li><li>活性分析</li></ul></li></ul><p>其中控制流分析和数据流分析都基于控制流图，而控制流图是通过三地址码得到的。</p><h2 id="代码优化" tabindex="-1"><a class="header-anchor" href="#代码优化"><span>代码优化</span></a></h2><ul><li>前期优化 <ul><li>常量折叠</li><li>代数化简</li><li>不可达代码删除</li></ul></li><li>中期优化 <ul><li>常量传播</li><li>拷贝传播</li><li>死代码删除</li></ul></li></ul><h2 id="编译器流水线图" tabindex="-1"><a class="header-anchor" href="#编译器流水线图"><span>编译器流水线图</span></a></h2><p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gty3jsr771j61m40i2aeg02.jpg" alt=""></p><h2 id="编译原理思维导图" tabindex="-1"><a class="header-anchor" href="#编译原理思维导图"><span>编译原理思维导图</span></a></h2><p><img src="http://assets.processon.com/chart_image/6127604e1efad446c34f17c9.png" alt=""></p>',37);function h(d,u){const l=s("ExternalLinkIcon");return r(),p("div",null,[c,t("p",null,[e("常用的词法分析器生成器有"),t("a",g,[e("flex"),n(l)]),e("，它的原理在于通过一系列算法，将表示词法规则的正则表达式转换为有限状态自动机来作为词法分析器。")]),m])}const E=a(o,[["render",h],["__file","9. 总结.html.vue"]]),b=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/9.%20%E6%80%BB%E7%BB%93.html","title":"总结","lang":"zh-CN","frontmatter":{"description":"总结 编译就是把一门计算机语言翻译成另一门计算机语言的过程，最终的输出结果通常是汇编语言或另一门高级语言。 编译是由多阶段构成的流水线过程，主要包括词法分析、语法分析、语义分析、代码生成、代码优化等流程，上一阶段的输出是下一阶段的输入。 词法分析 词法分析会把字符流识别并划分为一个个有意义的词法单元，称为token。 词法分析的原理是有限状态自动机。获...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/9.%20%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"总结"}],["meta",{"property":"og:description","content":"总结 编译就是把一门计算机语言翻译成另一门计算机语言的过程，最终的输出结果通常是汇编语言或另一门高级语言。 编译是由多阶段构成的流水线过程，主要包括词法分析、语法分析、语义分析、代码生成、代码优化等流程，上一阶段的输出是下一阶段的输入。 词法分析 词法分析会把字符流识别并划分为一个个有意义的词法单元，称为token。 词法分析的原理是有限状态自动机。获..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gstbtj1gozj30m104j3yw.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"总结\\",\\"image\\":[\\"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gstbtj1gozj30m104j3yw.jpg\\",\\"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gsvlz5ftrlj30m0028t8q.jpg\\",\\"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gt1qlr4018j30e605wt8t.jpg\\",\\"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gtu6ak066uj60ec07it8x02.jpg\\",\\"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gty3jsr771j61m40i2aeg02.jpg\\",\\"http://assets.processon.com/chart_image/6127604e1efad446c34f17c9.png\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"词法分析","slug":"词法分析","link":"#词法分析","children":[]},{"level":2,"title":"语法分析","slug":"语法分析","link":"#语法分析","children":[]},{"level":2,"title":"语义分析","slug":"语义分析","link":"#语义分析","children":[]},{"level":2,"title":"代码生成","slug":"代码生成","link":"#代码生成","children":[]},{"level":2,"title":"代码优化","slug":"代码优化","link":"#代码优化","children":[]},{"level":2,"title":"编译器流水线图","slug":"编译器流水线图","link":"#编译器流水线图","children":[]},{"level":2,"title":"编译原理思维导图","slug":"编译原理思维导图","link":"#编译原理思维导图","children":[]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":4.29,"words":1287},"filePathRelative":"计算机基础/编译原理/9. 总结.md","localizedDate":"2024年4月12日","autoDesc":true}');export{E as comp,b as data};
