import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-BzW9chhs.js";const p={},e=t(`<h1 id="二分查找" tabindex="-1"><a class="header-anchor" href="#二分查找"><span>二分查找</span></a></h1><p>二分查找常见的应用场景是：在有序数组中，寻找一个数，寻找左侧边界，寻找右侧边界。</p><p>二分查找的代码框架：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">binSearch</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// 搜索空间 [left, right]</span>

  <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 防止 left + right 数据溢出</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> mid
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 太大，往左边找</span>
      right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 太小，往右边找</span>
      left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre></div><p>分析二分查找的一个细节是：不要写 else 分支，而是用 else if 写清楚每个分支的情况，避免混乱。</p><p>二分查找有个重要的问题是<strong>确定搜索空间</strong>，以上代码的搜索空间为 [left, right]，有些代码会使用 [left, right) 作搜索空间，后面会介绍。</p><h2 id="寻找左侧边界" tabindex="-1"><a class="header-anchor" href="#寻找左侧边界"><span>寻找左侧边界</span></a></h2><p>在有序数组中，如果 target 有多个重复值，它们一定是连续的，找出 target 的左侧边界索引。</p><p>解决这个问题的关键在于：当找到 target 时，不立即返回，而是收缩右边界，继续寻找。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">leftBoundary</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token comment">// 搜索空间为 [left, right)</span>

  <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 找到 target，不返回</span>
      right <span class="token operator">=</span> mid <span class="token comment">// 收缩右边界，继续寻找</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      right <span class="token operator">=</span> mid
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> left <span class="token operator">&gt;=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">===</span> target <span class="token operator">?</span> left <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre></div><p>代码整体上和二分搜索 target 差不多，区别在于，搜索 target 只需在找到时立即返回，而搜索边界在需要继续搜索直至循环结束，最终判断 nums[left] 是否等于 target。</p><p>以上代码中的搜索空间为 [left, right)，这使得循环结束条件、指针变化有些不同，来看下搜索空间为 [left, right] 的代码。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">leftBoundary</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// 搜索空间 [left, right]</span>

  <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 找到 target，不返回</span>
      right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// 缩小右边界，往左继续寻找</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> left <span class="token operator">&gt;=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">===</span> target <span class="token operator">?</span> left <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="寻找右侧边界" tabindex="-1"><a class="header-anchor" href="#寻找右侧边界"><span>寻找右侧边界</span></a></h2><p>和上面的问题类似，这次是寻找右边界。我们统一用 [left, right] 来写代码。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">rightBoundary</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// 搜索空间 [left, right]</span>

  <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 找到 target，不返回</span>
      right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// 缩小右边界，往左继续寻找</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> left <span class="token operator">&gt;=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> target <span class="token operator">?</span> left <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre></div><p>寻找右边界有个非常重要的点需要注意，由于 <code>left = mid + 1</code>，而我们要检查的是 mid 索引下的值，循环结束时，mid 等于 left - 1。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>无论是基本二分搜索、搜索左边界、搜索右边界，第一步先确定搜索区间是 [left, right] 还是 [left, right)，这会决定很多东西。</p><p>搜索区间为 [left, right] 时</p><ul><li>初始化 <code>right = nums.length - 1</code></li><li>循环条件为 <code>while(left &lt;= right)</code>，循环结束时 <code>left &gt; right</code></li><li>指针变化是 <code>left = mid + 1</code> 和 <code>right = mid - 1</code></li><li>找到 target 时，如果要搜索右边界，则 <code>left = mid + 1</code>，如果要搜索左边界，则 <code>right = mid - 1</code></li></ul><p>如果搜索区间为 <code>[left, right)</code></p><ul><li>初始化 <code>right = nums.lengt</code></li><li>循环条件为 <code>while(left &lt; right)</code>，循环结束时 <code>left === right</code></li><li>指针变化是 <code>left = mid + 1</code> 和 <code>right = mid</code></li><li>找到 target 时，如果要搜索右边界，同样是 <code>left = mid + 1</code>，但如果要搜索左边界，则 <code>right = mid</code></li></ul><p>当寻找右边界时，无论是哪种搜索空间，收缩左侧边界时都是 <code>left = mid + 1</code>，正因为如此，最后返回的边界索引为 <code>left - 1</code>，因为我们要检查的是 mid 索引下的值，循环结束时，如果没有 target 值，则最后 left 肯定等于 right，而 mid 等于 left - 1。</p><p>综上，建议无论找 target 值还是边界，统一使用 [left, right] 搜索区间，当搜索右边界时，循环结束后，注意检查的是 <code>nums[left - 1]</code>。</p>`,25),o=[e];function c(l,r){return s(),a("div",null,o)}const i=n(p,[["render",c],["__file","1.3.二分搜索.html.vue"]]),d=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/leetcode/1.3.%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2.html","title":"二分查找","lang":"zh-CN","frontmatter":{"description":"二分查找 二分查找常见的应用场景是：在有序数组中，寻找一个数，寻找左侧边界，寻找右侧边界。 二分查找的代码框架： 分析二分查找的一个细节是：不要写 else 分支，而是用 else if 写清楚每个分支的情况，避免混乱。 二分查找有个重要的问题是确定搜索空间，以上代码的搜索空间为 [left, right]，有些代码会使用 [left, right) ...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E7%BC%96%E7%A8%8B/leetcode/1.3.%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"二分查找"}],["meta",{"property":"og:description","content":"二分查找 二分查找常见的应用场景是：在有序数组中，寻找一个数，寻找左侧边界，寻找右侧边界。 二分查找的代码框架： 分析二分查找的一个细节是：不要写 else 分支，而是用 else if 写清楚每个分支的情况，避免混乱。 二分查找有个重要的问题是确定搜索空间，以上代码的搜索空间为 [left, right]，有些代码会使用 [left, right) ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二分查找\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"寻找左侧边界","slug":"寻找左侧边界","link":"#寻找左侧边界","children":[]},{"level":2,"title":"寻找右侧边界","slug":"寻找右侧边界","link":"#寻找右侧边界","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":3.42,"words":1027},"filePathRelative":"编程/leetcode/1.3.二分搜索.md","localizedDate":"2024年4月12日","autoDesc":true}');export{i as comp,d as data};
