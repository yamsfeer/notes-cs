import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-BzW9chhs.js";const p={},o=t(`<h1 id="utf-8-编码解码" tabindex="-1"><a class="header-anchor" href="#utf-8-编码解码"><span>utf-8 编码解码</span></a></h1><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 判断需要多少个字节存储</span>
<span class="token keyword">function</span> <span class="token function">getCodeBytes</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> codeSeg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x007f</span><span class="token punctuation">,</span> <span class="token number">0x07ff</span><span class="token punctuation">,</span> <span class="token number">0xffff</span><span class="token punctuation">,</span> <span class="token number">0x10ffff</span><span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">&gt;</span> codeSeg<span class="token punctuation">[</span>codeSeg<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;超出编码范围&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> codeSeg<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">&lt;=</span> codeSeg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">padEncodeStr</span><span class="token punctuation">(</span><span class="token parameter">binCode<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  binCode <span class="token operator">=</span> binCode<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 补齐空位</span>
  <span class="token keyword">let</span> encodeStr <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  <span class="token keyword">let</span> binPtr <span class="token operator">=</span> binCode<span class="token punctuation">.</span>length
  <span class="token keyword">let</span> i <span class="token operator">=</span> n
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 首字节另外填充</span>
    <span class="token comment">//截取六位填充一个字节</span>
    encodeStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">10</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>binCode<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>binPtr <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">,</span> binPtr<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>encodeStr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    binPtr <span class="token operator">-=</span> <span class="token number">6</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 当只有一个字节时，以0开头</span>
  <span class="token keyword">let</span> start <span class="token operator">=</span> n <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">0</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;0&#39;</span>
  encodeStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>start<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>binCode<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> binPtr<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>encodeStr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token keyword">return</span> encodeStr
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token parameter">char</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> code <span class="token operator">=</span> char<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> binCode <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 2进制字符串</span>
  <span class="token keyword">let</span> bytes <span class="token operator">=</span> <span class="token function">getCodeBytes</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token comment">// 需要bytes个字节存储</span>
  <span class="token keyword">return</span> <span class="token function">padEncodeStr</span><span class="token punctuation">(</span>binCode<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sliceCode</span><span class="token punctuation">(</span><span class="token parameter">binCode<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> segs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    segs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>binCode<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    p <span class="token operator">+=</span> <span class="token number">8</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> segs<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token parameter">binCode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> unicode <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>binCode<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n<span class="token operator">++</span>
  <span class="token punctuation">}</span>
  n <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token comment">// 至少需要1个字节</span>
  unicode <span class="token operator">+=</span> binCode<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
  unicode <span class="token operator">+=</span> <span class="token function">sliceCode</span><span class="token punctuation">(</span>binCode<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">0b</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>unicode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&#39;文&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;111001101001011010000111&#39;</span><span class="token punctuation">)</span>
<span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;01100001&#39;</span>

<span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">&#39;111001101001011010000111&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;文&#39;</span>
<span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">&#39;01100001&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;a&#39;</span>

<span class="token function">decode</span><span class="token punctuation">(</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&#39;文&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;文&#39;</span>
<span class="token function">decode</span><span class="token punctuation">(</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;0&#39;</span>
</code></pre></div>`,4),e=[o];function c(u,l){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","utf-8编码解码.html.vue"]]),d=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81/utf-8%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81.html","title":"utf-8 编码解码","lang":"zh-CN","frontmatter":{"description":"utf-8 编码解码","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E7%BC%96%E7%A8%8B/%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81/utf-8%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"utf-8 编码解码"}],["meta",{"property":"og:description","content":"utf-8 编码解码"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"utf-8 编码解码\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":0.89,"words":267},"filePathRelative":"编程/手写代码/utf-8编码解码.md","localizedDate":"2024年4月12日","autoDesc":true}');export{r as comp,d as data};
