import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as e,a as n,d as s,e as c,b as u}from"./app-BzW9chhs.js";const l={},i=u(`<h1 id="观察者模式-vs-发布订阅" tabindex="-1"><a class="header-anchor" href="#观察者模式-vs-发布订阅"><span>观察者模式 VS 发布订阅</span></a></h1><p>观察者模式是设计模式的一种，发布订阅是软件架构中的一种消息范式。两者很类似但又有区别。</p><p>观察者模式有两个角色，而发布订阅至少需要三个角色。</p><ul><li>观察者模式：观察者 ( observer )、被观察者 ( subject / observable )</li><li>发布订阅：发布者 ( publisher )、发布订阅中心 ( pubsub )、订阅者 ( subscriber )</li></ul><p>观察者的重点是 subject，发布订阅的重点在于 pubsub。</p><h2 id="观察者模式" tabindex="-1"><a class="header-anchor" href="#观察者模式"><span>观察者模式</span></a></h2><p>观察者模式有两个角色：观察者 ( observer )、被观察者 ( subject / observable )。</p><p>subject 通常会持有一份 observer 列表，以便在合适的时候通知它们。</p><p>subject 有三个能力：添加、移除、通知 observer。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> idx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">ob</span> <span class="token operator">=&gt;</span> ob <span class="token operator">===</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">ob</span> <span class="token operator">=&gt;</span> ob<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>observer 和 subject 两者约定一个函数叫 update，当 subject 需要通知时调用这个函数。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb
  <span class="token punctuation">}</span>
  <span class="token function">observe</span><span class="token punctuation">(</span><span class="token parameter">subject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    subject<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>观察者模式使用起来大概是这样的。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> ob1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token parameter">msg</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ob2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token parameter">msg</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>

subject<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>ob1<span class="token punctuation">)</span> <span class="token comment">// 被观察者主动邀请</span>
ob2<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span> <span class="token comment">// 观察者主动观察</span>

subject<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">&#39;some content&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>可以看出，“观察”这个动作就是 <code>addObserver</code>，它可以由两种方法产生</p><ul><li><code>subject.addObserver</code>，相当于被观察者主动邀请观察者</li><li><code>observer.observe</code>，相当于观察者主动观察</li></ul><p>subject 定义变化，observer 定义行为，addObserver 使他们建立联系。</p><h2 id="发布订阅模式" tabindex="-1"><a class="header-anchor" href="#发布订阅模式"><span>发布订阅模式</span></a></h2><p>观察者模式中，subject 需要维护 observer 的列表，并且在自身变化时，依次调用每个 observer 的 update 函数。</p><p>如果 subject 自身已经很复杂，这些工作可以抽离出来，成为一个发布订阅中心 pubsub，subject 只需要通知 pubsub 即可。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Publisher</span> <span class="token punctuation">{</span> <span class="token comment">// 发布者</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">pubsub</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pubsub <span class="token operator">=</span> pubsub
  <span class="token punctuation">}</span>

  <span class="token function">publish</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pubsub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> content<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>发布订阅模式下，最主要的工作是由 pubsub 完成的，它相当于中间人。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">PubSub</span> <span class="token punctuation">{</span> <span class="token comment">// 发布订阅中心</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>contents <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">publish</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>contents<span class="token punctuation">[</span>type<span class="token punctuation">]</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>contents<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> content <span class="token comment">// 也可以用数组存起来，看具体场景</span>
  <span class="token punctuation">}</span>

  <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> subs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>type<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>contents<span class="token punctuation">[</span>type<span class="token punctuation">]</span>
    <span class="token keyword">const</span> cbs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>type<span class="token punctuation">]</span>
    cbs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=&gt;</span> <span class="token function">cb</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Subscriber</span> <span class="token punctuation">{</span> <span class="token comment">// 订阅者</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">pubsub</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pubsub <span class="token operator">=</span> pubsub
  <span class="token punctuation">}</span>

  <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pubsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> cb<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>发布订阅最终使用起来是这样的：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pubsub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PubSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> subscriber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token punctuation">(</span>pubsub<span class="token punctuation">)</span>
<span class="token keyword">const</span> publisher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Publisher</span><span class="token punctuation">(</span>pubsub<span class="token punctuation">)</span>

subscriber<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&#39;event&#39;</span><span class="token punctuation">,</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>
publisher<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">&#39;event&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;publisher is publishing a message&#39;</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>为方便理解，可以用卖家 ( seller )、中介 ( agent )、买家 ( buyer ) 三者类比。</p><ul><li>卖家直接通知买家，这是观察者模式</li><li>有多个卖家买家则需要中介，卖家只管通知中介，中介再通知买家，卖家卖家互相不知道对方的信息。这是发布订阅模式</li></ul><p>可以认为发布订阅就是两层的观察者模式。</p><p>这两个模式很常用，只是有不同的叫法，比如 watch、observer、listen、dispatch、trigger、emit、on、event、bus 等。当看到这些函数，就可以意识到这是观察者模式或发布订阅模式。</p>`,31),k={href:"https://juejin.cn/post/6978728619782701087",target:"_blank",rel:"noopener noreferrer"};function r(b,d){const a=p("ExternalLinkIcon");return o(),e("div",null,[i,n("p",null,[s("参考："),n("a",k,[s("理解【观察者模式】和【发布订阅】的区别"),c(a)])])])}const v=t(l,[["render",r],["__file","5.发布订阅模式.html.vue"]]),y=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5.%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.html","title":"观察者模式 VS 发布订阅","lang":"zh-CN","frontmatter":{"description":"观察者模式 VS 发布订阅 观察者模式是设计模式的一种，发布订阅是软件架构中的一种消息范式。两者很类似但又有区别。 观察者模式有两个角色，而发布订阅至少需要三个角色。 观察者模式：观察者 ( observer )、被观察者 ( subject / observable ) 发布订阅：发布者 ( publisher )、发布订阅中心 ( pubsub )...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5.%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"观察者模式 VS 发布订阅"}],["meta",{"property":"og:description","content":"观察者模式 VS 发布订阅 观察者模式是设计模式的一种，发布订阅是软件架构中的一种消息范式。两者很类似但又有区别。 观察者模式有两个角色，而发布订阅至少需要三个角色。 观察者模式：观察者 ( observer )、被观察者 ( subject / observable ) 发布订阅：发布者 ( publisher )、发布订阅中心 ( pubsub )..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"观察者模式 VS 发布订阅\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[]},{"level":2,"title":"发布订阅模式","slug":"发布订阅模式","link":"#发布订阅模式","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":2.69,"words":807},"filePathRelative":"编程/设计模式/5.发布订阅模式.md","localizedDate":"2024年4月12日","autoDesc":true}');export{v as comp,y as data};
