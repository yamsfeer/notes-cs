import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,b as t}from"./app-BzW9chhs.js";const e={},p=t(`<h1 id="bfs" tabindex="-1"><a class="header-anchor" href="#bfs"><span>BFS</span></a></h1><p>问题的本质就是让你在一幅「图」中找到从起点start到终点target的最近距离。</p><h2 id="二叉树的最小深度-111" tabindex="-1"><a class="header-anchor" href="#二叉树的最小深度-111"><span>二叉树的最小深度 ( 111 )</span></a></h2><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">minDepth</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>

  <span class="token keyword">const</span> q <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>
  <span class="token keyword">let</span> depth <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 单个节点算作 1</span>

  <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> levelLength <span class="token operator">=</span> q<span class="token punctuation">.</span>length
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> levelLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 取出当前 level 的节点</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 叶子结点</span>
        <span class="token keyword">return</span> depth
      <span class="token punctuation">}</span>

      <span class="token comment">// null 节点没必要入队</span>
      cur<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
      cur<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    depth<span class="token operator">++</span> <span class="token comment">// 处理完一层后，depth 加 1</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> depth
<span class="token punctuation">}</span>
</code></pre></div>`,4),o=[p];function c(l,r){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","5.3.BFS.html.vue"]]),d=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/leetcode/5.3.BFS.html","title":"BFS","lang":"zh-CN","frontmatter":{"description":"BFS 问题的本质就是让你在一幅「图」中找到从起点start到终点target的最近距离。 二叉树的最小深度 ( 111 )","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E7%BC%96%E7%A8%8B/leetcode/5.3.BFS.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"BFS"}],["meta",{"property":"og:description","content":"BFS 问题的本质就是让你在一幅「图」中找到从起点start到终点target的最近距离。 二叉树的最小深度 ( 111 )"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"BFS\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"二叉树的最小深度 ( 111 )","slug":"二叉树的最小深度-111","link":"#二叉树的最小深度-111","children":[]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":0.42,"words":127},"filePathRelative":"编程/leetcode/5.3.BFS.md","localizedDate":"2024年4月12日","autoDesc":true}');export{k as comp,d as data};
