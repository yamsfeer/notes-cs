import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,b as p}from"./app-BzW9chhs.js";const t={},o=p(`<h1 id="享元模式" tabindex="-1"><a class="header-anchor" href="#享元模式"><span>享元模式</span></a></h1><p>享元 ( flyweight ) 模式是一种用于性能优化的模式，fly 在这里是苍蝇的意思，意为蝇量级。</p><p>享元模式的核心是<strong>运用共享技术来有效支持大量细粒度的对象</strong>。如果系统中因为创建了大量类似的对象而导致内存占用过高，享元模式就非常有用了。</p><p>假设现分别有 50 种男士女士内衣，现在要为这些内衣拍广告照片。不使用享元模式时，需要 100 名男女模特，代码如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">sex<span class="token punctuation">,</span> underwear</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex
    <span class="token keyword">this</span><span class="token punctuation">.</span>underwear <span class="token operator">=</span> underwear
  <span class="token punctuation">}</span>
  <span class="token function">takePhoto</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>underwear<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>100 名模特分别拍照。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> maleModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">&#39;male&#39;</span><span class="token punctuation">,</span> underwear<span class="token punctuation">)</span>
  <span class="token keyword">const</span> femaleModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">&#39;male&#39;</span><span class="token punctuation">,</span> underwear<span class="token punctuation">)</span>

  maleModel<span class="token punctuation">.</span><span class="token function">takePhoto</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  femaleModel<span class="token punctuation">.</span><span class="token function">takePhoto</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>然而，事实上我们只需要一男一女两名模特就足够了。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex
  <span class="token punctuation">}</span>
  <span class="token function">takePhoto</span><span class="token punctuation">(</span><span class="token parameter">underwear</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">,</span> underwear<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> maleModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">&#39;male&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> femaleModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">&#39;female&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  maleModel<span class="token punctuation">.</span><span class="token function">takePhoto</span><span class="token punctuation">(</span>underwear<span class="token punctuation">)</span>
  femaleModel<span class="token punctuation">.</span><span class="token function">takePhoto</span><span class="token punctuation">(</span>underwear<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这个例子便是享元模式的雏形。</p><h2 id="内部状态和外部状态" tabindex="-1"><a class="header-anchor" href="#内部状态和外部状态"><span>内部状态和外部状态</span></a></h2><p>享元模式要求将对象的属性划分为内部状态与外部状态。内部状态有以下几个特点：</p><ul><li>内部状态：存储于对象内部，可以被一些对象共享，独立于具体的场景，通常不会改变。</li><li>外部状态：取决于具体的场景，并根据场景而变化，不能被共享。</li></ul><p>内部状态相同的对象使用一个共享对象。而外部状态可以从对象上剥离出来，并储存在外部。剥离了外部状态的对象成为共享对象，外部状态在必要时被传入共享对象来组装成一个完整对象。</p><p>虽然组装外部状态需要花费一定时间，却可以大大减少对象的数量。因此，享元模式是一种用<strong>时间换空间</strong>的优化模式。</p><p>在上面的例子中，性别是内部状态，内衣是外部状态。通常来讲，内部状态有多少种组合，便最多需要多少个共享对象，所以我们只需要 2 个模特对象。</p><h2 id="文件上传的例子" tabindex="-1"><a class="header-anchor" href="#文件上传的例子"><span>文件上传的例子</span></a></h2><p>微云有一个文件上传的功能，支持同时选择 2000 个文件，每个文件对应一个 upload 对象；另外还支持 plugin、flash 两种上传方式。</p><p>不使用享元模式的代码大概如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">startUpload</span><span class="token punctuation">(</span><span class="token parameter">uploadType<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> file <span class="token keyword">of</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> uploadObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Upload</span><span class="token punctuation">(</span>uploadType<span class="token punctuation">,</span> file<span class="token punctuation">)</span>
    uploadObj<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>startUpload 函数会根据 files 数组的长度创建 upload 对象。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Upload</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">uploadType<span class="token punctuation">,</span> file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>uploadType <span class="token operator">=</span> uploadType
    <span class="token keyword">this</span><span class="token punctuation">.</span>file <span class="token operator">=</span> file
  <span class="token punctuation">}</span>
  <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>uploadType <span class="token operator">===</span> <span class="token string">&#39;plugin&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     	<span class="token function">pluginUpload</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">flashUpload</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这段代码使用起来大概是这样的。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">startUpload</span><span class="token punctuation">(</span><span class="token string">&#39;plugin&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;file1&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fileSize</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;file2&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fileSize</span><span class="token operator">:</span> <span class="token number">2000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;file3&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fileSize</span><span class="token operator">:</span> <span class="token number">3000</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token function">startUpload</span><span class="token punctuation">(</span><span class="token string">&#39;flase&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;file4&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fileSize</span><span class="token operator">:</span> <span class="token number">4000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;file5&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fileSize</span><span class="token operator">:</span> <span class="token number">5000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;file6&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fileSize</span><span class="token operator">:</span> <span class="token number">6000</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>如果用户选中了 2000 个文件，则会创建 2000 个 upload 对象，占用较大内存。</p><h3 id="享元模式重构文件上传" tabindex="-1"><a class="header-anchor" href="#享元模式重构文件上传"><span>享元模式重构文件上传</span></a></h3><h4 id="区分内部状态和外部状态" tabindex="-1"><a class="header-anchor" href="#区分内部状态和外部状态"><span>区分内部状态和外部状态</span></a></h4><p>使用享元模式就要区分这 2000 个对象的属性里，哪些是内部状态，哪些是外部状态。</p><ul><li>明确了 uploadType，上传对象就可以被任何文件使用。所以 uploadType 是内部状态。</li><li>每个文件的 fileName 和 fileSize 等属性都不一样，没有办法共享，它们都是外部状态。</li></ul><h4 id="剥离外部状态" tabindex="-1"><a class="header-anchor" href="#剥离外部状态"><span>剥离外部状态</span></a></h4><p>已知 uploadType 是内部状态，file 属性是外部状态，则 upload 对象只需保留 uploadType。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Upload</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">uploadType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>uploadType <span class="token operator">=</span> uploadType
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="创建共享对象" tabindex="-1"><a class="header-anchor" href="#创建共享对象"><span>创建共享对象</span></a></h4><p>我们可以像前面内衣的例子，直接创建共享对象，内部状态比较多时需要使用缓存。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> createUpload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 缓存已创建的共享对象</span>
  <span class="token keyword">const</span> flyWeightObjs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">uploadType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> flyWeightObjs<span class="token punctuation">[</span>uploadType<span class="token punctuation">]</span>
      <span class="token operator">?</span> flyWeightObjs<span class="token punctuation">[</span>uploadType<span class="token punctuation">]</span>
      <span class="token operator">:</span> flyWeightObjs<span class="token punctuation">[</span>uploadType<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Upload</span><span class="token punctuation">(</span>uploadType<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>内部状态 uploadType 有两种可能，所以 flyWeightObjs 最终会缓存两个共享对象：pluginUpload 和 flashUpload。</p><h4 id="管理外部状态" tabindex="-1"><a class="header-anchor" href="#管理外部状态"><span>管理外部状态</span></a></h4><p>前面提到过，共享对象 + 外部状态 = 完整对象。我们定义 uploadManager 对象，它负责两件事：</p><ul><li>调用 createUpload 创建共享对象</li><li>给共享对象设置外部状态</li></ul><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> uploadManager <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> uploadDatabase <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">uploadType<span class="token punctuation">,</span> file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> flyWeightObj <span class="token operator">=</span> <span class="token function">createUpload</span><span class="token punctuation">(</span>uploadType<span class="token punctuation">)</span>
      <span class="token keyword">return</span> flyWeightObj
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">setExternalState</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> flyWeightObj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 设置外部状态</span>
      <span class="token keyword">const</span> uploadData <span class="token operator">=</span> uploadDatabase<span class="token punctuation">[</span>id<span class="token punctuation">]</span>
      Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>flyWeightObj<span class="token punctuation">,</span> uploadData<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>startUpload 函数改为使用 uploadManager 创建 upload 对象。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">startUpload</span><span class="token punctuation">(</span><span class="token parameter">uploadType<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> file <span class="token keyword">of</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> uploadObj <span class="token operator">=</span> uploadManager<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>uploadType<span class="token punctuation">,</span> file<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>注意这里的 uploadObj 是共享对象，不包含 file 的属性，需要调用 setExternalState 方法才能得到真正的 upload 对象才可以上传。</p><h2 id="对象池" tabindex="-1"><a class="header-anchor" href="#对象池"><span>对象池</span></a></h2><p>地图应用上常见一些标志地名的小气泡 tooltip，每个 tooltip 都是一个 div，频繁创建和销毁这些 div 会有较大性能消耗。</p><p>按对象池的思想，已经创建的 tooltip 在失效后不会被回收，而是放入对象池，以便重复利用。</p><p>比如一开始创建 3 个 tooltip，失效后回收到对象池，下次需要 6 个 tooltip，则有 3 个从对象池取出，不足的数量则新建。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createObjFactory</span><span class="token punctuation">(</span><span class="token parameter">createObjFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> pool <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> pool<span class="token punctuation">.</span>length
        <span class="token operator">?</span> pool<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">createObjFn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">recover</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      pool<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>使用起来大概是这样的。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createTooltip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> div document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
  document<span class="token punctuation">.</span><span class="token function">bodyappendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span>
  <span class="token keyword">return</span> div
<span class="token punctuation">}</span>

<span class="token keyword">const</span> tooltipFactory <span class="token operator">=</span> <span class="token function">createObjFactory</span><span class="token punctuation">(</span>createTooltip<span class="token punctuation">)</span>
<span class="token keyword">const</span> tooltip <span class="token operator">=</span> tooltipFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>对象池是另外一种性能优化方案，它跟享元模式有些相似，但没有分离内部状态和外部状态。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>当存在大量相似对象时，相似的部分称为内部状态，提取内部状态作为共享对象，其余为外部状态，共享对象 + 外部属性 = 对象。</p><p>一般来说，以下情况下可以使用享元模式。</p><ul><li>存在大量的相似对象，造成很大的内存开销</li><li>对象大多数属性都可以作为外部状态</li><li>剥离出外部状态之后，用较少的共享对象取代大量对象</li></ul><p>享元模式可以很好地解决大量对象带来的性能问题。</p>`,57),e=[o];function c(l,u){return a(),s("div",null,e)}const r=n(t,[["render",c],["__file","9.享元模式.html.vue"]]),d=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/9.%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.html","title":"享元模式","lang":"zh-CN","frontmatter":{"description":"享元模式 享元 ( flyweight ) 模式是一种用于性能优化的模式，fly 在这里是苍蝇的意思，意为蝇量级。 享元模式的核心是运用共享技术来有效支持大量细粒度的对象。如果系统中因为创建了大量类似的对象而导致内存占用过高，享元模式就非常有用了。 假设现分别有 50 种男士女士内衣，现在要为这些内衣拍广告照片。不使用享元模式时，需要 100 名男女模...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/9.%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"享元模式"}],["meta",{"property":"og:description","content":"享元模式 享元 ( flyweight ) 模式是一种用于性能优化的模式，fly 在这里是苍蝇的意思，意为蝇量级。 享元模式的核心是运用共享技术来有效支持大量细粒度的对象。如果系统中因为创建了大量类似的对象而导致内存占用过高，享元模式就非常有用了。 假设现分别有 50 种男士女士内衣，现在要为这些内衣拍广告照片。不使用享元模式时，需要 100 名男女模..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"享元模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"内部状态和外部状态","slug":"内部状态和外部状态","link":"#内部状态和外部状态","children":[]},{"level":2,"title":"文件上传的例子","slug":"文件上传的例子","link":"#文件上传的例子","children":[{"level":3,"title":"享元模式重构文件上传","slug":"享元模式重构文件上传","link":"#享元模式重构文件上传","children":[]}]},{"level":2,"title":"对象池","slug":"对象池","link":"#对象池","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":4.99,"words":1498},"filePathRelative":"编程/设计模式/9.享元模式.md","localizedDate":"2024年4月12日","autoDesc":true}');export{r as comp,d as data};
