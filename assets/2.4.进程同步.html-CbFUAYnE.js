import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as t,b as l}from"./app-BzW9chhs.js";const i={},n=l('<h1 id="进程同步" tabindex="-1"><a class="header-anchor" href="#进程同步"><span>进程同步</span></a></h1><h2 id="信号量" tabindex="-1"><a class="header-anchor" href="#信号量"><span>信号量</span></a></h2><p>进程需要信号量判断自身是否等待或唤醒。</p><p>信号量非常重要，必须保证信号量是正确的。因为进程随时可能被切走，错误的信号量会造成进程同步错误。</p><p>为了保证信号量正确，需要对信号量进行保护，具体来说就是加锁。</p><p>进程中修改信号量的代码称为临界区，必须保证同一时刻只有一个进程在一个信号量的临界区，即某一时刻只能有一个进程在修改信号量。</p><h2 id="锁算法" tabindex="-1"><a class="header-anchor" href="#锁算法"><span>锁算法</span></a></h2><p>之所以要保护信号量，是因为进程调度可能使得信号量不正确（A进程处理完信号量之前切到进程 B，B又修改了信号量）</p><p>因为，锁的作用是保持临界区的原子性。</p><h3 id="面包店算法" tabindex="-1"><a class="header-anchor" href="#面包店算法"><span>面包店算法</span></a></h3><p>在软件层面实现</p><h3 id="开关中断" tabindex="-1"><a class="header-anchor" href="#开关中断"><span>开关中断</span></a></h3><p>硬件实现</p><h3 id="硬件原子指令" tabindex="-1"><a class="header-anchor" href="#硬件原子指令"><span>硬件原子指令</span></a></h3><p>硬件实现</p><p>单个指令是不可能被打断的。</p><h2 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁"><span>死锁</span></a></h2><h3 id="形成死锁的条件" tabindex="-1"><a class="header-anchor" href="#形成死锁的条件"><span>形成死锁的条件</span></a></h3><ul><li>互斥使用 ( Mutual exclusion )：资源的固有特性</li><li>不可抢占 ( No preemption )：资源只能自愿放弃</li><li>请求和保持 ( Hold and wait )：进程必须占有资源，再去申请</li><li>循环等待 ( Circular wait )：在资源分配图中存在环</li></ul><h3 id="处理方法" tabindex="-1"><a class="header-anchor" href="#处理方法"><span>处理方法</span></a></h3><ul><li>预防死锁：破坏死锁出现的条件，比如一次申请所有资源</li><li>避免死锁： 检查每个资源请求，如果会造成死锁则拒绝，银行家算法</li><li>死锁检测和恢复：出现死锁时，进程回滚，让出资源</li><li>死锁忽略：直接忽略</li></ul><p>死锁出现概率较小，且其他方法代价较高，因此通常采用死锁忽略。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2>',23),r=[n];function s(p,h){return a(),t("div",null,r)}const d=e(i,[["render",s],["__file","2.4.进程同步.html.vue"]]),m=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.4.%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5.html","title":"进程同步","lang":"zh-CN","frontmatter":{"description":"进程同步 信号量 进程需要信号量判断自身是否等待或唤醒。 信号量非常重要，必须保证信号量是正确的。因为进程随时可能被切走，错误的信号量会造成进程同步错误。 为了保证信号量正确，需要对信号量进行保护，具体来说就是加锁。 进程中修改信号量的代码称为临界区，必须保证同一时刻只有一个进程在一个信号量的临界区，即某一时刻只能有一个进程在修改信号量。 锁算法 之所...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.4.%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"进程同步"}],["meta",{"property":"og:description","content":"进程同步 信号量 进程需要信号量判断自身是否等待或唤醒。 信号量非常重要，必须保证信号量是正确的。因为进程随时可能被切走，错误的信号量会造成进程同步错误。 为了保证信号量正确，需要对信号量进行保护，具体来说就是加锁。 进程中修改信号量的代码称为临界区，必须保证同一时刻只有一个进程在一个信号量的临界区，即某一时刻只能有一个进程在修改信号量。 锁算法 之所..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"进程同步\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"信号量","slug":"信号量","link":"#信号量","children":[]},{"level":2,"title":"锁算法","slug":"锁算法","link":"#锁算法","children":[{"level":3,"title":"面包店算法","slug":"面包店算法","link":"#面包店算法","children":[]},{"level":3,"title":"开关中断","slug":"开关中断","link":"#开关中断","children":[]},{"level":3,"title":"硬件原子指令","slug":"硬件原子指令","link":"#硬件原子指令","children":[]}]},{"level":2,"title":"死锁","slug":"死锁","link":"#死锁","children":[{"level":3,"title":"形成死锁的条件","slug":"形成死锁的条件","link":"#形成死锁的条件","children":[]},{"level":3,"title":"处理方法","slug":"处理方法","link":"#处理方法","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":1.49,"words":448},"filePathRelative":"计算机基础/操作系统/2.4.进程同步.md","localizedDate":"2024年4月12日","autoDesc":true}');export{d as comp,m as data};
