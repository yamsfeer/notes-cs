import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as e,c,a as s,d as n,e as l,b as a}from"./app-BzW9chhs.js";const u={},i=a(`<h1 id="状态模式" tabindex="-1"><a class="header-anchor" href="#状态模式"><span>状态模式</span></a></h1><p>状态模式是一种非同寻常的优秀模式，它也许是解决某些需求场景的最好方法。</p><p>下面通过两个例子介绍状态模式。</p><h2 id="电灯程序" tabindex="-1"><a class="header-anchor" href="#电灯程序"><span>电灯程序</span></a></h2><p>现有一个开关按钮，如果当前灯是关闭状态，点击按钮开灯，否则关灯，用代码表示如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token string">&#39;off&#39;</span>
<span class="token keyword">function</span> <span class="token function">buttonPress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开灯&#39;</span><span class="token punctuation">)</span>
    state <span class="token operator">=</span> <span class="token string">&#39;on&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;关灯&#39;</span><span class="token punctuation">)</span>
    state <span class="token operator">=</span> <span class="token string">&#39;off&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> buttonPress
</code></pre></div><p>如果某天又增加了强弱光，代码修改如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">buttonPress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;弱光&#39;</span><span class="token punctuation">)</span>
    state <span class="token operator">=</span> <span class="token string">&#39;weak&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token string">&#39;weak&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;强光&#39;</span><span class="token punctuation">)</span>
    state <span class="token operator">=</span> <span class="token string">&#39;strong&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token string">&#39;strong&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;关灯&#39;</span><span class="token punctuation">)</span>
    state <span class="token operator">=</span> <span class="token string">&#39;off&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>以上代码有如下几个缺点：</p><ul><li>每次修改 light 的状态都需要改动 buttonPress 里的代码，违反开放-封闭原则。</li><li>逻辑都堆在 buttonPress 里，如果新增强强光、超强光，这个函数会继续膨胀。</li><li>状态转换不明显。在这一串 if-else 语句里，很难一眼看出到底有多少种状态以及他们的转换关系。</li></ul><h3 id="状态模式改进" tabindex="-1"><a class="header-anchor" href="#状态模式改进"><span>状态模式改进</span></a></h3><p>状态模式的关键是：把状态和对应的行为独立封装起来，当 button 按下的时，只需在上下文中把请求委托给当前的状态对象即可。</p><p>这个例子中，灯有关闭、弱光、强光灯几个状态。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> offState <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">buttonPress</span><span class="token punctuation">(</span><span class="token parameter">light</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;弱光&#39;</span><span class="token punctuation">)</span>
    light<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>weakState<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> weakState <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">buttonPress</span><span class="token punctuation">(</span><span class="token parameter">light</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;强光&#39;</span><span class="token punctuation">)</span>
    light<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>strongState<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> strongState <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">buttonPress</span><span class="token punctuation">(</span><span class="token parameter">light</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;关灯&#39;</span><span class="token punctuation">)</span>
    light<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>offState<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>每次点击按钮，需要改变当前状态，这会自动替换掉 buttonPress 函数。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Light</span> <span class="token punctuation">{</span>
  curState <span class="token operator">=</span> offState
  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>curState <span class="token operator">=</span> state
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
button<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> light<span class="token punctuation">.</span>curState<span class="token punctuation">.</span><span class="token function">buttonPress</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span>
</code></pre></div><p>每个 state 对象的 buttonPress 函数即是这个状态对应的行为。</p><h2 id="文件上传" tabindex="-1"><a class="header-anchor" href="#文件上传"><span>文件上传</span></a></h2><p>不论是文件上传，还是音乐、视频播放器，都有明显的状态区分。</p><ul><li>文件上传中有扫描、正在上传、暂停、上传成功、上传失败等状态</li><li>音乐播放器有加载中、正在播放、暂停、播放完毕等状态。</li></ul><p>以文件上传为例，假设上传组件有两个按钮，一个用于暂停或继续上传，另一个用于删除文件。</p><ul><li><p>文件扫描状态时，不能暂停或删除</p><ul><li>如果文件已存在服务器，则直接跳到上传完成状态</li><li>如果文件损坏，则跳到失败状态</li><li>其余情况进入上传中状态</li></ul></li><li><p>上传中状态下可以暂停上传，已暂停状态可以继续上传</p></li><li><p>扫描和上传中状态下，不能删除文件，暂停、上传完成、上传失败的情况下才能删除</p></li></ul><p>和上个例子一样，先不用状态模式实现：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Upload</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token string">&#39;sign&#39;</span> <span class="token comment">// 初始状态为扫描</span>

  <span class="token function">bidnEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pauseBtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token string">&#39;sign&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;扫描中&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token string">&#39;uploading&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeState</span><span class="token punctuation">(</span><span class="token string">&#39;pause&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
      <span class="token comment">// else if ...</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    delBtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token string">&#39;sign&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token comment">// else if ...</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">changeState</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">swtich</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&#39;sign&#39;</span><span class="token operator">:</span>
      <span class="token keyword">case</span> <span class="token string">&#39;uploading&#39;</span><span class="token operator">:</span>
      <span class="token comment">// case ...</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>不难看出这段代码的缺点，太多 if-else 语句，状态和行为被耦合在一个巨大的方法里，难以拓展和维护。</p><h3 id="状态模式重构" tabindex="-1"><a class="header-anchor" href="#状态模式重构"><span>状态模式重构</span></a></h3><p>状态模式在文件上传的程序中，是最优雅的解决办法之一。先来封装状态。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> signState <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;扫描中，点击无效&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件正上传中，不能删除&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> uploadingState <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> upload<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件正上传中，不能删除&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> pauseState <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> upload<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> upload<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> doneState <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件已上传，点击无效&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> upload<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> errorState <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件上传失败，点击无效&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> upload<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Upload</span> <span class="token punctuation">{</span>
  curState <span class="token operator">=</span> signState
  plugin <span class="token operator">=</span> plugin
  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 创建 button 节点 */</span> <span class="token punctuation">}</span>
  <span class="token function">bindEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> pauseBtn<span class="token punctuation">,</span> delBtn<span class="token punctuation">,</span> curState <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>
    pauseBtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> curState<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    delBtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> curState<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>plugin<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>curState <span class="token operator">=</span> signState
  <span class="token punctuation">}</span>
  <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>plugin<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>curState <span class="token operator">=</span> uploadingState
  <span class="token punctuation">}</span>
  <span class="token comment">// pause() {}</span>
  <span class="token comment">// done() {}</span>
  <span class="token comment">// error() {}</span>
  <span class="token comment">// del() {}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="状态机" tabindex="-1"><a class="header-anchor" href="#状态机"><span>状态机</span></a></h2><h3 id="表驱动的有限状态机" tabindex="-1"><a class="header-anchor" href="#表驱动的有限状态机"><span>表驱动的有限状态机</span></a></h3><p>状态机可以用表驱动，下一个状态由当前状态和特定行为决定。</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">状态 A</th><th style="text-align:center;">状态 B</th><th style="text-align:center;">状态 C</th></tr></thead><tbody><tr><td style="text-align:center;">行为 X</td><td style="text-align:center;">...</td><td style="text-align:center;">...</td><td style="text-align:center;">...</td></tr><tr><td style="text-align:center;">行为 Y</td><td style="text-align:center;">...</td><td style="text-align:center;">状态 C</td><td style="text-align:center;">...</td></tr><tr><td style="text-align:center;">行为 Z</td><td style="text-align:center;">...</td><td style="text-align:center;">...</td><td style="text-align:center;">...</td></tr></tbody></table>`,33),k={href:"https://github.com/jakesgordon/javascript-state-machine",target:"_blank",rel:"noopener noreferrer"},r=a(`<h3 id="其他状态机应用" tabindex="-1"><a class="header-anchor" href="#其他状态机应用"><span>其他状态机应用</span></a></h3><p>在实际开发中，很多场景都可以用状态机来模拟。</p><ul><li>下拉菜单在 hover 动作下有显示、 悬浮、隐藏等状态</li><li>TCP 请求有建立连接、监听、关闭等状态</li><li>格斗游戏中人物有攻击、防御、跳跃、跌倒等状态</li></ul><p>状态机在游戏开发中有着广泛的用途，特别是游戏 AI 的逻辑编写。游戏主角走动的过程中如果被攻击，就会切换为跌倒状态；跌倒状态下，不能攻击或防御；跳跃过程中不能切换到防御状态，但可以攻击。这种场景很适合用状态机描述。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">FSM</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">walk</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 攻击 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">defense</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 防御 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 跳跃 */</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">attack</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 攻击时不能行走 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">defense</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 攻击时不能防御 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 攻击时不能跳跃 */</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="状态模式的几点" tabindex="-1"><a class="header-anchor" href="#状态模式的几点"><span>状态模式的几点</span></a></h2><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h3><p>优点：</p><ul><li>通过增加新的状态类，很容易增加新的状态和转换关系。</li><li>避免 context 无限膨胀，状态切换的逻辑被分布在状态类中。</li><li>用对象代替字符串来记录状态，使得状态的切换一目了然。</li><li>context 中的请求动作和状态的行为互不影响。</li></ul><p>缺点：会在系统中定义许多状态类，增加不少对象。</p><h3 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化"><span>性能优化</span></a></h3><p>我们有两种选择来管理 state 对象的创建和销毁。</p><ul><li>当 state 对象被需要时才创建并随后销毁</li><li>一开始就创建好所有状态对象，且始终不销毁</li></ul><p>如果 state 对象比较大，可以用第一种方式；如果状态改变很频繁，则使用第二种。</p><p>另外，各 context 对象可以共享一个 state 对象，这也是享元模式的应用场景之一。</p><h3 id="与策略模式的关系" tabindex="-1"><a class="header-anchor" href="#与策略模式的关系"><span>与策略模式的关系</span></a></h3><p>策略模式和状态模式有点类似，它们都有上下文 context、策略或状态，上下文把请求委托给策略或状态来执行。他们的区别在于：</p><ul><li>策略类之间是平行的，它们之间没有任何联系， 客户必须熟知策略的具体作用，按需选择。</li><li>状态的行为、状态之间的切换是被封装好的，“改变行为”发生在状态模式内部，客户不需要了解细节。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>通过电灯和文件上传这两个例子不难看出，当程序状态较多时，很容易写出 if-else 的屎山代码。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// do something</span>
  state <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// do something</span>
  state <span class="token operator">=</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
<span class="token comment">// ...</span>
</code></pre></div><p>状态模式封装了状态与对应的行为，context 将请求委托给状态对象的行为。</p><p>状态模式的大概结构如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">FSM</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">state1</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">behaviour</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;behaviour 1&#39;</span><span class="token punctuation">)</span>
      context<span class="token punctuation">.</span>state <span class="token operator">=</span> state2
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">state2</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">behaviour</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;behaviour 2&#39;</span><span class="token punctuation">)</span>
      context<span class="token punctuation">.</span>state <span class="token operator">=</span> state3
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token constant">FSM</span><span class="token punctuation">.</span>state1
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">behaviour</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token comment">// behaviour 1</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">behaviour</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token comment">// behaviour 2</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,25);function d(g,h){const t=o("ExternalLinkIcon");return e(),c("div",null,[i,s("p",null,[n("github 上的状态机库："),s("a",k,[n("javascript-state-machine"),l(t)]),n("。")]),r])}const y=p(u,[["render",d],["__file","13.状态模式.html.vue"]]),v=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/13.%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html","title":"状态模式","lang":"zh-CN","frontmatter":{"description":"状态模式 状态模式是一种非同寻常的优秀模式，它也许是解决某些需求场景的最好方法。 下面通过两个例子介绍状态模式。 电灯程序 现有一个开关按钮，如果当前灯是关闭状态，点击按钮开灯，否则关灯，用代码表示如下： 如果某天又增加了强弱光，代码修改如下： 以上代码有如下几个缺点： 每次修改 light 的状态都需要改动 buttonPress 里的代码，违反开放...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/13.%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"状态模式"}],["meta",{"property":"og:description","content":"状态模式 状态模式是一种非同寻常的优秀模式，它也许是解决某些需求场景的最好方法。 下面通过两个例子介绍状态模式。 电灯程序 现有一个开关按钮，如果当前灯是关闭状态，点击按钮开灯，否则关灯，用代码表示如下： 如果某天又增加了强弱光，代码修改如下： 以上代码有如下几个缺点： 每次修改 light 的状态都需要改动 buttonPress 里的代码，违反开放..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"状态模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"电灯程序","slug":"电灯程序","link":"#电灯程序","children":[{"level":3,"title":"状态模式改进","slug":"状态模式改进","link":"#状态模式改进","children":[]}]},{"level":2,"title":"文件上传","slug":"文件上传","link":"#文件上传","children":[{"level":3,"title":"状态模式重构","slug":"状态模式重构","link":"#状态模式重构","children":[]}]},{"level":2,"title":"状态机","slug":"状态机","link":"#状态机","children":[{"level":3,"title":"表驱动的有限状态机","slug":"表驱动的有限状态机","link":"#表驱动的有限状态机","children":[]},{"level":3,"title":"其他状态机应用","slug":"其他状态机应用","link":"#其他状态机应用","children":[]}]},{"level":2,"title":"状态模式的几点","slug":"状态模式的几点","link":"#状态模式的几点","children":[{"level":3,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":3,"title":"性能优化","slug":"性能优化","link":"#性能优化","children":[]},{"level":3,"title":"与策略模式的关系","slug":"与策略模式的关系","link":"#与策略模式的关系","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":5.8,"words":1740},"filePathRelative":"编程/设计模式/13.状态模式.md","localizedDate":"2024年4月12日","autoDesc":true}');export{y as comp,v as data};
