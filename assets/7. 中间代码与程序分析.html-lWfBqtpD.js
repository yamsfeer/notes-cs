import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as i,b as l}from"./app-BzW9chhs.js";const o={},p=l('<h1 id="中间代码与程序分析" tabindex="-1"><a class="header-anchor" href="#中间代码与程序分析"><span>中间代码与程序分析</span></a></h1><p>在简单的编译器中，可能会把抽象语法树直接生成汇编代码；但是在现代编译器中，一般会经多步生成多个中间表示之后，再生成汇编代码。</p><p>常见的中间表示有：</p><ul><li><p>树和有向无环图（<em>DAG, Directed Acyclic Graph</em>）</p><p>这是一种高层表示，适用于程序源代码</p></li><li><p>三地址码（<em>3-address code</em>）</p><p>低层表示，靠近目标机器</p></li><li><p>控制流图（<em>CFG, control-flow graph</em>）</p><p>更精细的三地址码，是程序的图状表示。适合做程序分析、程序优化等。</p></li><li><p>静态单赋值形式（<em>SSA, static single assignment form</em>）</p><p>更精细的控制流图，同时编码控制流信息和数据流信息。</p></li><li><p>连续传递风格（<em>CPS, Continuation-passing style</em>）</p><p>更一般的SSA。</p></li></ul><p>之所以要划分成不同的中间表示，主要出于<strong>编译器工程上的考虑</strong>和<strong>程序分析和代码优化的需要</strong>。</p><p>从编译器工程上来说：</p><ul><li>阶段划分：把整个编译过程划分成不同的阶段</li><li>任务分解：每个阶段只处理翻译过程的一个步骤</li><li>代码工程：代码更容易实现、除错、维护和演进</li></ul><p><strong>程序分析</strong>和<strong>代码优化</strong>都和程序的中间表示密切相关，许多优化在特定的中间表示上才可以进行或容易进行。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>需要注意的是，目前不存在一种通用编译器语言IR，使得所有编程语言可以通过翻译成IR后再翻译成目标机器汇编来屏蔽底层差异。</p></div><p>本章将全面讨论中间表示涉及的重要问题和解决方案。</p><ul><li>中间代码表示：详细介绍现代编译器的几种常用的重要中间表示 <ul><li>三地址码</li><li>控制流图</li><li>静态单复制形式</li></ul></li><li>程序分析：详细介绍在中间表示上做程序分析的理论和技术 <ul><li>控制流分析</li><li>数据流分析 <ul><li>到达定义分析</li><li>活性分析</li></ul></li></ul></li></ul>',11),r=[p];function a(n,c){return t(),i("div",null,r)}const E=e(o,[["render",a],["__file","7. 中间代码与程序分析.html.vue"]]),d=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/7.%20%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%A0%81%E4%B8%8E%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90.html","title":"中间代码与程序分析","lang":"zh-CN","frontmatter":{"description":"中间代码与程序分析 在简单的编译器中，可能会把抽象语法树直接生成汇编代码；但是在现代编译器中，一般会经多步生成多个中间表示之后，再生成汇编代码。 常见的中间表示有： 树和有向无环图（DAG, Directed Acyclic Graph） 这是一种高层表示，适用于程序源代码 三地址码（3-address code） 低层表示，靠近目标机器 控制流图（C...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/7.%20%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%A0%81%E4%B8%8E%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"中间代码与程序分析"}],["meta",{"property":"og:description","content":"中间代码与程序分析 在简单的编译器中，可能会把抽象语法树直接生成汇编代码；但是在现代编译器中，一般会经多步生成多个中间表示之后，再生成汇编代码。 常见的中间表示有： 树和有向无环图（DAG, Directed Acyclic Graph） 这是一种高层表示，适用于程序源代码 三地址码（3-address code） 低层表示，靠近目标机器 控制流图（C..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"中间代码与程序分析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":1.74,"words":521},"filePathRelative":"计算机基础/编译原理/7. 中间代码与程序分析.md","localizedDate":"2024年4月12日","autoDesc":true}');export{E as comp,d as data};
