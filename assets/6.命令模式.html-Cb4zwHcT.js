import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,b as t}from"./app-BzW9chhs.js";const p={},o=t(`<h1 id="命令模式" tabindex="-1"><a class="header-anchor" href="#命令模式"><span>命令模式</span></a></h1><p>命令模式是最简单和优雅的模式之一。</p><p>命令模式的应用场景是：需要向某些对象发送请求，但并不知道请求的接收者是谁，也不知道这个请求的具体操作是什么。</p><p>拿订餐来说，客人实际是向厨师发送请求，但不知道厨师的名字，也不知道炒菜的方式和步骤。命令模式把客人的请求封装成 command 对象 ( 订单 )。command 对象可以被四处传递，比如从服务员传到厨师。</p><p>总的来说，命令模式解除了请求的<strong>发送者</strong>和<strong>接收者</strong>之间的耦合关系。</p><h2 id="为按钮添加点击事件" tabindex="-1"><a class="header-anchor" href="#为按钮添加点击事件"><span>为按钮添加点击事件</span></a></h2><p>假设我们需要为按钮添加点击事件，当按钮点击时刷新菜单。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Menu <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;刷新菜单&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>即使不使用命令模式，也可以很容易实现这个功能。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>button<span class="token punctuation">.</span>onclick <span class="token operator">=</span> Menu<span class="token punctuation">.</span>refresh <span class="token comment">// button 和 Menu 耦合</span>
</code></pre></div><p>设计模式总是把变化与不变分离开，命令模式也不例外。按下按钮之后会发生一些事情是不变的，具体发生什么是可变的。</p><p>命令模式将<strong>过程式的调用</strong>封装在 command 对象的 execute 方法里，即把运算块包装起来。</p><p>command 对象可以被四处传递，所以在调用命令的时候，client 不需要关心事情是如何进行的。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token parameter">receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> receiver<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> command <span class="token operator">=</span> <span class="token function">createCommand</span><span class="token punctuation">(</span>Menu<span class="token punctuation">)</span>
button<span class="token punctuation">.</span>onclick <span class="token operator">=</span> command
</code></pre></div><p>如果想更明确地表达当前正在使用命令模式，或者除了执行命令之外，将来有可能还要提供撤销命令等操作。我们最好把函数名改为 execute。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token parameter">receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      receiver<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> command <span class="token operator">=</span> <span class="token function">createCommand</span><span class="token punctuation">(</span>Menu<span class="token punctuation">)</span>
button<span class="token punctuation">.</span>onclick <span class="token operator">=</span> command<span class="token punctuation">.</span>execute
</code></pre></div><p>解释一下这段代码中的语义：</p><ul><li>Menu 是命令的接收者 ( receiver )，一项命令可以被执行 ( execute )</li><li>按钮添加事件相当于“设定点击按钮时会执行一项命令”，具体命令做什么，按钮不用太清楚，只需执行命令即可 ( 调用 execute )</li></ul><p>不难看出，execute 方法类似于回调函数。确实，命令模式其实是回调函数的一个面向对象的替代品。然而，命令模式还能实现回调函数做不到的功能，比如撤销和重做。</p><h2 id="撤销" tabindex="-1"><a class="header-anchor" href="#撤销"><span>撤销</span></a></h2><p>策略模式中介绍了缓动动画的例子。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>moveBtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> animate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animate</span><span class="token punctuation">(</span>ball<span class="token punctuation">)</span>
  animate<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token comment">// 往右移动到 200px</span>
<span class="token punctuation">}</span>
</code></pre></div><p>我们用命令模式重构它并实现撤销功能。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">moveCommand</span><span class="token punctuation">(</span><span class="token parameter">receiver<span class="token punctuation">,</span> pos</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> oldPos <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 记录旧位置</span>
      oldPos <span class="token operator">=</span> receiver<span class="token punctuation">.</span>dom<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">)</span>
      receiver<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">receiver</span><span class="token punctuation">(</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span> oldPos<span class="token punctuation">)</span> <span class="token comment">// 回到旧位置</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> command <span class="token operator">=</span> <span class="token function">moveCommand</span><span class="token punctuation">(</span>animate<span class="token punctuation">,</span> pos<span class="token punctuation">.</span>value<span class="token punctuation">)</span>

moveBtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
cancelBtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> command<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>撤销是命令模式里一个非常有用的功能，试想一下开发一个围棋程序的时候，我们把每一步棋子的变化都封装成命令，则可以轻而易举地实现悔棋功能。同样，撤销命令还可以用于实现文本编辑器的 Ctrl+Z 功能。</p><h2 id="重做" tabindex="-1"><a class="header-anchor" href="#重做"><span>重做</span></a></h2><p>很多时候我们需要撤销一系列命令，比如已经下了 10 步棋，需要悔棋 5 步，我们可以将所有执行过的下棋命令存储在栈中，然后依次出栈执行 undo 操作。</p><p>但有些命令是不可逆的，比如在 canvas 中要擦除一条线是不容易实现的。我们可以先清空画布，然后把所有命令重新执行，除了最后一个命令，这就是重做。</p><p>现在我们要实现一个游戏播放录像的功能，即将一局游戏中所有执行过的命令依次重新执行。</p><p>先规定游戏角色的动作：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Ryu <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;攻击&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">defense</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;防御&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;跳跃&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">crouch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;蹲下&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>然后是按键与角色动作的映射关系。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> codes <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">119</span><span class="token operator">:</span> <span class="token string">&#39;jump&#39;</span><span class="token punctuation">,</span> <span class="token comment">// W</span>
  <span class="token number">115</span><span class="token operator">:</span> <span class="token string">&#39;crouch&#39;</span><span class="token punctuation">,</span> <span class="token comment">// S</span>
  <span class="token number">97</span><span class="token operator">:</span> <span class="token string">&#39;defense&#39;</span><span class="token punctuation">,</span> <span class="token comment">// A</span>
  <span class="token number">100</span><span class="token operator">:</span> <span class="token string">&#39;attack&#39;</span><span class="token punctuation">,</span> <span class="token comment">// D</span>
<span class="token punctuation">}</span>
</code></pre></div><p>用命令模式实现重做。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">makeCommand</span><span class="token punctuation">(</span><span class="token parameter">receiver<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      receiver<span class="token punctuation">[</span>action<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> commandQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 命令队列</span>
document<span class="token punctuation">.</span><span class="token function-variable function">onkeypress</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> keyCode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> action <span class="token operator">=</span> codes<span class="token punctuation">[</span>keyCode<span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> command <span class="token operator">=</span> <span class="token function">makeCommand</span><span class="token punctuation">(</span>Ryu<span class="token punctuation">,</span> action<span class="token punctuation">)</span>
  command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 执行命令</span>
  commandQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token comment">// 记录执行过的命令</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">replay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  commandQueue<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">command</span> <span class="token operator">=&gt;</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  commandQueue<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="命令队列" tabindex="-1"><a class="header-anchor" href="#命令队列"><span>命令队列</span></a></h2><p>命令可以看成一个独立的存在，命令对象的生命周期跟初始请求发生的时间无关，command 对象的 execute 方法可以在程序运行的任何时刻执行。</p><p>如果命令太多无法及时执行，比如一个动画还没执行完，又来了新的命令，我们可以将命令放入队列，按顺序执行。至于当一个动画执行完成后如何通知队列执行下一个命令，可以用发布订阅模式。</p><h2 id="宏命令" tabindex="-1"><a class="header-anchor" href="#宏命令"><span>宏命令</span></a></h2><p>宏命令是一组命令的集合。假设现在有如下个命令对象。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> closeDoor <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;关门&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> openPc <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开电脑&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> openQQ <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;登录QQ&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>我们用一个宏命令将其组合起来。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">macroCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> commandList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">command</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      commandList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      commandList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">command</span> <span class="token operator">=&gt;</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> macro <span class="token operator">=</span> <span class="token function">macroCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
macro<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>closeDoor<span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>openPc<span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>openQQ<span class="token punctuation">)</span>
macro<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>宏命令是命令模式与组合模式的联用产物，关于组合模式会在后面介绍。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>命令模式将一段代码封装成 command 对象的 execute 方法。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token parameter">receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 命令的内容是一段代码块，让 receiver 做些事情</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>command 对象其实就是回调函数的封装，execute 方法相当于执行回调函数，有了这层封装，我们可以用栈记录执行函数前的信息，从而实现撤销，也可以用队列记录，从而实现重做。command 对象可以被四处传递，我们可以用命令队列控制命令的执行。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> commandQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">while</span><span class="token punctuation">(</span>hasCommand<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  commandQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token comment">// 记录命令的执行记录</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">replay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  commandQueue<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">command</span> <span class="token operator">=&gt;</span> command<span class="token punctuation">.</span>execute<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>跟许多其他语言不同，JavaScript 可以用高阶函数非常方便地实现命令模式。命令模式在 JavaScript 语言中是一种隐形的模式。</p>`,50),c=[o];function e(u,l){return a(),s("div",null,c)}const r=n(p,[["render",e],["__file","6.命令模式.html.vue"]]),d=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6.%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html","title":"命令模式","lang":"zh-CN","frontmatter":{"description":"命令模式 命令模式是最简单和优雅的模式之一。 命令模式的应用场景是：需要向某些对象发送请求，但并不知道请求的接收者是谁，也不知道这个请求的具体操作是什么。 拿订餐来说，客人实际是向厨师发送请求，但不知道厨师的名字，也不知道炒菜的方式和步骤。命令模式把客人的请求封装成 command 对象 ( 订单 )。command 对象可以被四处传递，比如从服务员传...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6.%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"命令模式"}],["meta",{"property":"og:description","content":"命令模式 命令模式是最简单和优雅的模式之一。 命令模式的应用场景是：需要向某些对象发送请求，但并不知道请求的接收者是谁，也不知道这个请求的具体操作是什么。 拿订餐来说，客人实际是向厨师发送请求，但不知道厨师的名字，也不知道炒菜的方式和步骤。命令模式把客人的请求封装成 command 对象 ( 订单 )。command 对象可以被四处传递，比如从服务员传..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"命令模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"为按钮添加点击事件","slug":"为按钮添加点击事件","link":"#为按钮添加点击事件","children":[]},{"level":2,"title":"撤销","slug":"撤销","link":"#撤销","children":[]},{"level":2,"title":"重做","slug":"重做","link":"#重做","children":[]},{"level":2,"title":"命令队列","slug":"命令队列","link":"#命令队列","children":[]},{"level":2,"title":"宏命令","slug":"宏命令","link":"#宏命令","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":5.06,"words":1518},"filePathRelative":"编程/设计模式/6.命令模式.md","localizedDate":"2024年4月12日","autoDesc":true}');export{r as comp,d as data};
