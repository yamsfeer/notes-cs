import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as p,c as l,a as e,d as n,e as a,b as o}from"./app-BzW9chhs.js";const r={},i=o(`<h1 id="词法分析" tabindex="-1"><a class="header-anchor" href="#词法分析"><span>词法分析</span></a></h1><h2 id="词法分析的任务" tabindex="-1"><a class="header-anchor" href="#词法分析的任务"><span>词法分析的任务</span></a></h2><p>词法分析的任务就是<strong>将字符流转化成token流</strong>。</p><p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gsxy8rv2mxj30dq021wef.jpg" alt=""></p><p>针对以下一段代码：</p><div class="language-c++" data-ext="c++" data-title="c++"><pre class="language-c++"><code>// helloworld.cpp
if (x &gt; 10) {
  cout &lt;&lt; &quot;hello world&quot; &lt;&lt; endl;
}
</code></pre></div><p>在计算机里，保存的是每个字符的<code>ASCII码</code>，除了英文字母和标点符号，还包括空格、换行符、文件结束符等等。</p><p><strong>词法分析器（<em>lexer</em>）<strong>的任务，就是</strong>把字符流识别并划分为一个个有意义的词法单元，称为token。</strong></p><p>上述代码，经词法分析后得到token流：<code>if</code>、<code>(</code>、<code>x</code>、<code>&gt;</code>、<code>10</code>、<code>)</code>、<code>{</code>、<code>cout</code>、<code>&lt;&lt;</code>、<code>&quot;hello world&quot;</code>、<code>&lt;&lt;</code>、<code>endl</code>、<code>;</code>、<code>}</code>。</p><p>token在lexer中可能的数据结构表示：</p><div class="language-c++" data-ext="c++" data-title="c++"><pre class="language-c++"><code>enum TYPE {
  KEYWORD,  // 关键字
  VARIABLE, // 标识符
  OPERATOR, // 操作符
  BRACKET,  // 括号
  BOOLEAN,  // 布尔型
  // ...
}

struct token {
  enum TYPE type,
  char *lexeme
}

// 关键字if的数据表示
token { type = KEYWORD, lexeme = &#39;if&#39; }
</code></pre></div><p>小结一下：</p><ul><li>词法分析的任务是将字符流转化为token流。</li></ul><ul><li>字符流：代码文本中的字符组成，和文本的编码方式有关（比如<code>ASCII</code>、<code>Unicode</code>）</li><li>token流：编译器内部定义的数据结构，编码所识别出的词法单元。</li></ul><h2 id="词法分析器的实现方法" tabindex="-1"><a class="header-anchor" href="#词法分析器的实现方法"><span>词法分析器的实现方法</span></a></h2><p>要获得一个词法分析器，主要有两种方案，它们各有特点：</p>`,16),d=e("li",null,"可以精确控制实现细节，运行效率高",-1),u=e("li",null,"手工实现复杂，容易出错",-1),h={href:"https://zh.wikipedia.org/wiki/GCC",target:"_blank",rel:"noopener noreferrer"},k={href:"https://zh.wikipedia.org/wiki/LLVM",target:"_blank",rel:"noopener noreferrer"},m=e("li",null,"可快速实现，代码量少，只需要提供一些词法规则的声明",-1),g=e("li",null,"难控制实现细节",-1),E={href:"https://zh.wikipedia.org/wiki/Lex",target:"_blank",rel:"noopener noreferrer"},_={href:"https://zh.wikipedia.org/wiki/Flex%E8%A9%9E%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},f=o(`<h3 id="编写词法分析器" tabindex="-1"><a class="header-anchor" href="#编写词法分析器"><span>编写词法分析器</span></a></h3><p>下面以判断<code>C语言</code>标识符为例，简单介绍词法分析器的实现。</p><p><code>C语言</code>标识符规定：</p><ul><li>以字母或下划线开头</li><li>由字母、数字、下划线组成</li></ul><p>相关的有限状态机如下图：</p><p><img src="https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gsuq0ow2tuj30ek03jgll.jpg" alt=""></p><div class="language-c" data-ext="c" data-title="c"><pre class="language-c"><code>token <span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  c <span class="token operator">=</span> <span class="token function">getChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">switch</span> c <span class="token punctuation">{</span>
    <span class="token comment">// ... 其他符号的case</span>
    <span class="token keyword">case</span> <span class="token punctuation">[</span>a<span class="token operator">-</span>z_A<span class="token operator">-</span>Z<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token comment">// 如果是字母或下划线，则从状态0转到状态1</span>
      c <span class="token operator">=</span> <span class="token function">getChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> c in <span class="token punctuation">[</span>a<span class="token operator">-</span>z_A<span class="token operator">-</span>Z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token comment">// 如果是[a-z_A-Z0-9]中的字符，保持在状态1</span>
        c <span class="token operator">=</span> <span class="token function">getChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>从语法角度，关键字的集合是标识符集合的一个子集。比如<code>if</code>、<code>for</code>等可以看成特殊的标识符。</p><p>判断关键字可以使用<code>关键字表算法</code>：</p><ul><li>对给定语言中所有的关键字，构建关键字哈希表H</li><li>对所有标识符和关键字，按标识符的状态机识别</li><li>识别完成后，查表H看是否是关键字</li><li>通过合理的构造哈希表H（完美哈希），可以O(1)时间完成</li></ul><p>当然，也可以在状态机中区分判断标识符和关键字，具体不再介绍。</p><h3 id="使用lexer生成器" tabindex="-1"><a class="header-anchor" href="#使用lexer生成器"><span>使用lexer生成器</span></a></h3><p>详见下节。</p>`,13);function x(y,A){const t=c("ExternalLinkIcon");return p(),l("div",null,[i,e("ul",null,[e("li",null,[n("手工编写 "),e("ul",null,[d,u,e("li",null,[e("a",h,[n("gcc"),a(t)]),n("、"),e("a",k,[n("LLVM"),a(t)]),n("使用这种方式")])])]),e("li",null,[n("lexer生成器 "),e("ul",null,[m,g,e("li",null,[n("lexer生成器工具有"),e("a",E,[n("lex"),a(t)]),n("、"),e("a",_,[n("flex"),a(t)]),n("等")])])])]),f])}const C=s(r,[["render",x],["__file","2. 词法分析.html.vue"]]),v=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.html","title":"词法分析","lang":"zh-CN","frontmatter":{"description":"词法分析 词法分析的任务 词法分析的任务就是将字符流转化成token流。 针对以下一段代码： 在计算机里，保存的是每个字符的ASCII码，除了英文字母和标点符号，还包括空格、换行符、文件结束符等等。 词法分析器（lexer）的任务，就是把字符流识别并划分为一个个有意义的词法单元，称为token。 上述代码，经词法分析后得到token流：if、(、x、>...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2.%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"词法分析"}],["meta",{"property":"og:description","content":"词法分析 词法分析的任务 词法分析的任务就是将字符流转化成token流。 针对以下一段代码： 在计算机里，保存的是每个字符的ASCII码，除了英文字母和标点符号，还包括空格、换行符、文件结束符等等。 词法分析器（lexer）的任务，就是把字符流识别并划分为一个个有意义的词法单元，称为token。 上述代码，经词法分析后得到token流：if、(、x、>..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gsxy8rv2mxj30dq021wef.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"词法分析\\",\\"image\\":[\\"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gsxy8rv2mxj30dq021wef.jpg\\",\\"https://raw.githubusercontent.com/yamsfeer/pic-bed/master/008i3skNgy1gsuq0ow2tuj30ek03jgll.jpg\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"词法分析的任务","slug":"词法分析的任务","link":"#词法分析的任务","children":[]},{"level":2,"title":"词法分析器的实现方法","slug":"词法分析器的实现方法","link":"#词法分析器的实现方法","children":[{"level":3,"title":"编写词法分析器","slug":"编写词法分析器","link":"#编写词法分析器","children":[]},{"level":3,"title":"使用lexer生成器","slug":"使用lexer生成器","link":"#使用lexer生成器","children":[]}]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":2.44,"words":731},"filePathRelative":"计算机基础/编译原理/2. 词法分析.md","localizedDate":"2024年4月12日","autoDesc":true}');export{C as comp,v as data};
