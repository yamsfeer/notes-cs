import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as p}from"./app-BzW9chhs.js";const t={},o=p(`<h1 id="职责链模式" tabindex="-1"><a class="header-anchor" href="#职责链模式"><span>职责链模式</span></a></h1><p>职责链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接收者耦合，这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><p>现实生活中，职责链模式的两个例子：</p><ul><li>早高峰的公交车过于拥挤，只能将公交卡交给前面一位乘客，乘客再交给另一位乘客，直至交给售票员。</li><li>考试时作弊，会将不会的题目编号写在纸条上往后传递，直至遇到能够解答的同学。</li></ul><p>从这两个例子中，我们很容易找到职责链模式的最大优点：请求发送者只需要知道整条链的第一个节点，从而弱化了发送者和一组接收者之间的强联系。</p><h2 id="预购手机的例子" tabindex="-1"><a class="header-anchor" href="#预购手机的例子"><span>预购手机的例子</span></a></h2><p>假设现在有一个预购手机的活动：</p><ul><li>支付 500 定金会收到 100 元优惠券</li><li>支付 200 定金会收到 50 元优惠券</li><li>没有支付定金则没有优惠券，且库存有限不保证能买到</li></ul><p>写成代码大概如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token parameter">orderType<span class="token punctuation">,</span> isPaid<span class="token punctuation">,</span> stock</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 500 定金购买模式</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isPaid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;500 定金预购&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 未支付定金，回到普通购买模式</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>stock <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;普通购买&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;库存不足&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>很明显，这个函数巨大到难以阅读，且经常需要修改。</p><h3 id="用职责链模式重构代码" tabindex="-1"><a class="header-anchor" href="#用职责链模式重构代码"><span>用职责链模式重构代码</span></a></h3><p>我们先把三种购买模式封装起来。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">order500</span><span class="token punctuation">(</span><span class="token parameter">orderType<span class="token punctuation">,</span> isPaid<span class="token punctuation">,</span> stock</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> isPaid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;500 定金预购&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">order200</span><span class="token punctuation">(</span>orderType<span class="token punctuation">,</span> isPaid<span class="token punctuation">,</span> stock<span class="token punctuation">)</span> <span class="token comment">// 将请求向下传递</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">order200</span><span class="token punctuation">(</span><span class="token parameter">orderType<span class="token punctuation">,</span> isPaid<span class="token punctuation">,</span> stock</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> isPaid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;200 定金预购&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">orderNormal</span><span class="token punctuation">(</span>orderType<span class="token punctuation">,</span> isPaid<span class="token punctuation">,</span> stock<span class="token punctuation">)</span> <span class="token comment">// 将请求向下传递</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">orderNormal</span><span class="token punctuation">(</span><span class="token parameter">orderType<span class="token punctuation">,</span> isPaid<span class="token punctuation">,</span> stock</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>stock <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;普通购买&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;库存不足&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>现在可读性有了一点提升，但是请求在链条中的传递非常僵硬，比如 order500 需要直接调用 order200 函数才能完成请求传递。</p><h3 id="灵活可拆分的职责连接点" tabindex="-1"><a class="header-anchor" href="#灵活可拆分的职责连接点"><span>灵活可拆分的职责连接点</span></a></h3><p>继续改写上面的三个函数，如果当前节点无法处理请求，不直接调用下个节点，而是用约定的字符串 &#39;next&#39; 表示向下传递。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">order500</span><span class="token punctuation">(</span><span class="token parameter">orderType<span class="token punctuation">,</span> isPaid<span class="token punctuation">,</span> stock</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> isPaid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;500 定金预购&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;next&#39;</span> <span class="token comment">// 我不知道下一个节点是谁，反正把请求往后面传递</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">order200</span><span class="token punctuation">(</span><span class="token parameter">orderType<span class="token punctuation">,</span> isPaid<span class="token punctuation">,</span> stock</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> isPaid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;200 定金预购&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;next&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">orderNormal</span><span class="token punctuation">(</span><span class="token parameter">orderType<span class="token punctuation">,</span> isPaid<span class="token punctuation">,</span> stock</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>stock <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;普通购买&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;库存不足&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>然后用 chain 对象将各节点连成链，并在链中传递请求。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Chain</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fn <span class="token operator">=</span> fn
    <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 下一个节点</span>
  <span class="token punctuation">}</span>
  <span class="token function">setSuccessor</span><span class="token punctuation">(</span><span class="token parameter">successor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">=</span> successor
  <span class="token punctuation">}</span>
  <span class="token function">process</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 尝试处理请求，无法处理则向下传递请求</span>
    <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">===</span> <span class="token string">&#39;next&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> successor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>successor
      <span class="token keyword">return</span> successor <span class="token operator">&amp;&amp;</span> successor<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>successor<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>创建三个节点并连成职责链，请求会在职责链上传递。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> chain500 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span>order500<span class="token punctuation">)</span>
<span class="token keyword">const</span> chain200 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span>order200<span class="token punctuation">)</span>
<span class="token keyword">const</span> chainNormal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span>orderNormal<span class="token punctuation">)</span>

chain500<span class="token punctuation">.</span><span class="token function">setSuccessor</span><span class="token punctuation">(</span>chain200<span class="token punctuation">)</span>
chain200<span class="token punctuation">.</span><span class="token function">setSuccessor</span><span class="token punctuation">(</span>orderNormal<span class="token punctuation">)</span>

chain500<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 库存不足</span>
</code></pre></div><p>通过改进，我们可以自由灵活地增加、移除和修改链中的节点顺序。假如某天需要支持 300 元定金购买，只需在链中增加一个节点。</p><h2 id="异步的职责链" tabindex="-1"><a class="header-anchor" href="#异步的职责链"><span>异步的职责链</span></a></h2><p>上一节的职责链中，process 函数会尝试处理请求，无法处理则向下传递请求。</p><p>假如我们需要根据 ajax 返回的结果判断是否向下传递，就需要能手动传递请求的函数 next 了。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Chain</span> <span class="token punctuation">{</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> successor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>successor
    <span class="token keyword">return</span> successor <span class="token operator">&amp;&amp;</span> successor<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>successor<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>来看一个例子。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fn1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token string">&#39;next&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fn2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 手动传递</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token string">&#39;next&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fn3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

fn1<span class="token punctuation">.</span><span class="token function">setSuccessor</span><span class="token punctuation">(</span>fn2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSuccessor</span><span class="token punctuation">(</span>fn3<span class="token punctuation">)</span>
fn1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>fn2 的 setTimeout 的回调函数中调用 next 函数手动传递职责。</p><p>可以想象，异步的职责链加上命令模式 ( 把 ajax 请求封装成命令对象 )，可以很方便地创建一个异步 ajax 队列库。</p><h2 id="用-aop-实现职责链" tabindex="-1"><a class="header-anchor" href="#用-aop-实现职责链"><span>用 AOP 实现职责链</span></a></h2><p>在之前的职责链实现中，我们利用了一个 Chain 类来把普通函数包装成职责链的节点。利用 JavaScript 的函数式特性，有一种更加方便的方法来创建职责链。</p><p>先将前面返回字符串 &#39;next&#39; 的约定改为返回 false，表示处理不了。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">after</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 当前节点无法处理</span>
      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token comment">// 传递给下一个</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> order <span class="token operator">=</span> order500
  <span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>order200<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>orderNormal<span class="token punctuation">)</span>
</code></pre></div><p>用 AOP 来实现职责链既简单又巧妙，但这种把函数叠在一起的方式，同时也叠加了函数的作用域，链条太长会对性能有较大影响。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>特点：将各节点串成链，如果当前节点无法处理请求则传递给下一个，直至遇到可以处理请求的节点。</li><li>作用：降低发起请求的对象和处理请求的对象之间的耦合性。</li><li>作用域链、原型链，DOM 节点的事件冒泡等都有职责链模式的影子。</li><li>职责链模式可以和组合模式结合，用来连接部件和父部件，或是提高组合对象的效率。</li></ul>`,39),c=[o];function e(l,u){return s(),a("div",null,c)}const r=n(t,[["render",e],["__file","10.职责链模式.html.vue"]]),d=JSON.parse('{"path":"/%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10.%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F.html","title":"职责链模式","lang":"zh-CN","frontmatter":{"description":"职责链模式 职责链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接收者耦合，这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。 现实生活中，职责链模式的两个例子： 早高峰的公交车过于拥挤，只能将公交卡交给前面一位乘客，乘客再交给另一位乘客，直至交给售票员。 考试时作弊，会将不会的题目编号写在纸条上往后传递，直至遇到能够解答...","head":[["meta",{"property":"og:url","content":"https://yamsfeer.github.io/notes-cs/%E7%BC%96%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10.%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"yamsfeer"}],["meta",{"property":"og:title","content":"职责链模式"}],["meta",{"property":"og:description","content":"职责链模式 职责链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接收者耦合，这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。 现实生活中，职责链模式的两个例子： 早高峰的公交车过于拥挤，只能将公交卡交给前面一位乘客，乘客再交给另一位乘客，直至交给售票员。 考试时作弊，会将不会的题目编号写在纸条上往后传递，直至遇到能够解答..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T15:44:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T15:44:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"职责链模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T15:44:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"预购手机的例子","slug":"预购手机的例子","link":"#预购手机的例子","children":[{"level":3,"title":"用职责链模式重构代码","slug":"用职责链模式重构代码","link":"#用职责链模式重构代码","children":[]},{"level":3,"title":"灵活可拆分的职责连接点","slug":"灵活可拆分的职责连接点","link":"#灵活可拆分的职责连接点","children":[]}]},{"level":2,"title":"异步的职责链","slug":"异步的职责链","link":"#异步的职责链","children":[]},{"level":2,"title":"用 AOP 实现职责链","slug":"用-aop-实现职责链","link":"#用-aop-实现职责链","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1712936658000,"updatedTime":1712936658000,"contributors":[{"name":"yamsfeer","email":"feer.yams@gmail.com","commits":1}]},"readingTime":{"minutes":4.53,"words":1360},"filePathRelative":"编程/设计模式/10.职责链模式.md","localizedDate":"2024年4月12日","autoDesc":true}');export{r as comp,d as data};
